/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.ELinkTyp;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Portfolioitem.PortfolioitemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemLinkRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ItemLink extends TableImpl<ItemLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.item_link</code>
     */
    public static final ItemLink ITEM_LINK = new ItemLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemLinkRecord> getRecordType() {
        return ItemLinkRecord.class;
    }

    /**
     * The column <code>tlmt.item_link.portfolioitem_id</code>.
     */
    public final TableField<ItemLinkRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.item_link.name</code>.
     */
    public final TableField<ItemLinkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>tlmt.item_link.link_type</code>.
     */
    public final TableField<ItemLinkRecord, ELinkTyp> LINK_TYPE = createField(DSL.name("link_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ELinkTyp.class), this, "");

    /**
     * The column <code>tlmt.item_link.url</code>.
     */
    public final TableField<ItemLinkRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>tlmt.item_link.comment</code>.
     */
    public final TableField<ItemLinkRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>tlmt.item_link.order_number</code>.
     */
    public final TableField<ItemLinkRecord, Integer> ORDER_NUMBER = createField(DSL.name("order_number"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private ItemLink(Name alias, Table<ItemLinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ItemLink(Name alias, Table<ItemLinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.item_link</code> table reference
     */
    public ItemLink(String alias) {
        this(DSL.name(alias), ITEM_LINK);
    }

    /**
     * Create an aliased <code>tlmt.item_link</code> table reference
     */
    public ItemLink(Name alias) {
        this(alias, ITEM_LINK);
    }

    /**
     * Create a <code>tlmt.item_link</code> table reference
     */
    public ItemLink() {
        this(DSL.name("item_link"), null);
    }

    public <O extends Record> ItemLink(Table<O> path, ForeignKey<O, ItemLinkRecord> childPath, InverseForeignKey<O, ItemLinkRecord> parentPath) {
        super(path, childPath, parentPath, ITEM_LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ItemLinkPath extends ItemLink implements Path<ItemLinkRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ItemLinkPath(Table<O> path, ForeignKey<O, ItemLinkRecord> childPath, InverseForeignKey<O, ItemLinkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ItemLinkPath(Name alias, Table<ItemLinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ItemLinkPath as(String alias) {
            return new ItemLinkPath(DSL.name(alias), this);
        }

        @Override
        public ItemLinkPath as(Name alias) {
            return new ItemLinkPath(alias, this);
        }

        @Override
        public ItemLinkPath as(Table<?> alias) {
            return new ItemLinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public UniqueKey<ItemLinkRecord> getPrimaryKey() {
        return Keys.PK_ITEM_LINK;
    }

    @Override
    public List<ForeignKey<ItemLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEM_LINK__ITEM_LINK_PORTFOLIOITEM_ID_FKEY);
    }

    private transient PortfolioitemPath _portfolioitem;

    /**
     * Get the implicit join path to the <code>tlmt.portfolioitem</code> table.
     */
    public PortfolioitemPath portfolioitem() {
        if (_portfolioitem == null)
            _portfolioitem = new PortfolioitemPath(this, Keys.ITEM_LINK__ITEM_LINK_PORTFOLIOITEM_ID_FKEY, null);

        return _portfolioitem;
    }

    @Override
    public ItemLink as(String alias) {
        return new ItemLink(DSL.name(alias), this);
    }

    @Override
    public ItemLink as(Name alias) {
        return new ItemLink(alias, this);
    }

    @Override
    public ItemLink as(Table<?> alias) {
        return new ItemLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemLink rename(String name) {
        return new ItemLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemLink rename(Name name) {
        return new ItemLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemLink rename(Table<?> name) {
        return new ItemLink(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink where(Condition condition) {
        return new ItemLink(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemLink where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemLink where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemLink where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemLink where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemLink whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
