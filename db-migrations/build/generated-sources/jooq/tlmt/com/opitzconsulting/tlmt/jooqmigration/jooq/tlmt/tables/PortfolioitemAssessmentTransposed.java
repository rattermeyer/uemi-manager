/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemAssessmentTransposedRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemAssessmentTransposed extends TableImpl<PortfolioitemAssessmentTransposedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>tlmt.portfolioitem_assessment_transposed</code>
     */
    public static final PortfolioitemAssessmentTransposed PORTFOLIOITEM_ASSESSMENT_TRANSPOSED = new PortfolioitemAssessmentTransposed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemAssessmentTransposedRecord> getRecordType() {
        return PortfolioitemAssessmentTransposedRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_assessment_transposed.uuid</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.radar_id</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> RADAR_ID = createField(DSL.name("radar_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.portfolioitem_id</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.portfolioitem_name</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_transposed.stars</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Integer> STARS = createField(DSL.name("stars"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_transposed.ALL</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> ALL = createField(DSL.name("ALL"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.associate</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> ASSOCIATE = createField(DSL.name("associate"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.enterprise</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> ENTERPRISE = createField(DSL.name("enterprise"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_transposed.lead</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> LEAD = createField(DSL.name("lead"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.professional</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> PROFESSIONAL = createField(DSL.name("professional"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_transposed.senior</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> SENIOR = createField(DSL.name("senior"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_transposed.sonstige</code>.
     */
    public final TableField<PortfolioitemAssessmentTransposedRecord, Long> SONSTIGE = createField(DSL.name("sonstige"), SQLDataType.BIGINT, this, "");

    private PortfolioitemAssessmentTransposed(Name alias, Table<PortfolioitemAssessmentTransposedRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemAssessmentTransposed(Name alias, Table<PortfolioitemAssessmentTransposedRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_assessment_transposed" as  SELECT pi.uuid,
         assessment_transposed.radar_id,
         assessment_transposed.portfolioitem_id,
         assessment_transposed.portfolioitem_name,
         assessment_transposed.stars,
         assessment_transposed."ALL",
         assessment_transposed.associate,
         assessment_transposed.enterprise,
         assessment_transposed.lead,
         assessment_transposed.professional,
         assessment_transposed.senior,
         assessment_transposed.sonstige
        FROM (( SELECT portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 1 AS stars,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ALL'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS "ALL",
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ASSOCIATE'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS associate,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ENTERPRISE'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS enterprise,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'LEAD'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS lead,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'PROFESSIONAL'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS professional,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SENIOR'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS senior,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SONSTIGE'::text THEN portfolioitem_assessment.one_star
                         ELSE NULL::integer
                     END) AS sonstige
                FROM tlmt.portfolioitem_assessment
               GROUP BY portfolioitem_assessment.radar_id, portfolioitem_assessment.portfolioitem_id, portfolioitem_assessment.portfolioitem_name
             UNION
              SELECT portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 2 AS stars,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ALL'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS "ALL",
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ASSOCIATE'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS associate,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ENTERPRISE'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS enterprise,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'LEAD'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS lead,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'PROFESSIONAL'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS professional,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SENIOR'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS senior,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SONSTIGE'::text THEN portfolioitem_assessment.two_stars
                         ELSE NULL::integer
                     END) AS sonstige
                FROM tlmt.portfolioitem_assessment
               GROUP BY portfolioitem_assessment.radar_id, portfolioitem_assessment.portfolioitem_id, portfolioitem_assessment.portfolioitem_name
             UNION
              SELECT portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 3 AS stars,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ALL'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS "ALL",
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ASSOCIATE'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS associate,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ENTERPRISE'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS enterprise,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'LEAD'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS lead,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'PROFESSIONAL'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS professional,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SENIOR'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS senior,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SONSTIGE'::text THEN portfolioitem_assessment.three_stars
                         ELSE NULL::integer
                     END) AS sonstige
                FROM tlmt.portfolioitem_assessment
               GROUP BY portfolioitem_assessment.radar_id, portfolioitem_assessment.portfolioitem_id, portfolioitem_assessment.portfolioitem_name
             UNION
              SELECT portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 4 AS stars,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ALL'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS "ALL",
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ASSOCIATE'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS associate,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'ENTERPRISE'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS enterprise,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'LEAD'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS lead,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'PROFESSIONAL'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS professional,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SENIOR'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS senior,
                 sum(
                     CASE portfolioitem_assessment.joblevel
                         WHEN 'SONSTIGE'::text THEN portfolioitem_assessment.four_stars
                         ELSE NULL::integer
                     END) AS sonstige
                FROM tlmt.portfolioitem_assessment
               GROUP BY portfolioitem_assessment.radar_id, portfolioitem_assessment.portfolioitem_id, portfolioitem_assessment.portfolioitem_name) assessment_transposed
          JOIN tlmt.portfolioitem pi ON ((assessment_transposed.portfolioitem_id = pi.id)));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_transposed</code>
     * table reference
     */
    public PortfolioitemAssessmentTransposed(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_ASSESSMENT_TRANSPOSED);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_transposed</code>
     * table reference
     */
    public PortfolioitemAssessmentTransposed(Name alias) {
        this(alias, PORTFOLIOITEM_ASSESSMENT_TRANSPOSED);
    }

    /**
     * Create a <code>tlmt.portfolioitem_assessment_transposed</code> table
     * reference
     */
    public PortfolioitemAssessmentTransposed() {
        this(DSL.name("portfolioitem_assessment_transposed"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemAssessmentTransposed as(String alias) {
        return new PortfolioitemAssessmentTransposed(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemAssessmentTransposed as(Name alias) {
        return new PortfolioitemAssessmentTransposed(alias, this);
    }

    @Override
    public PortfolioitemAssessmentTransposed as(Table<?> alias) {
        return new PortfolioitemAssessmentTransposed(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentTransposed rename(String name) {
        return new PortfolioitemAssessmentTransposed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentTransposed rename(Name name) {
        return new PortfolioitemAssessmentTransposed(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentTransposed rename(Table<?> name) {
        return new PortfolioitemAssessmentTransposed(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed where(Condition condition) {
        return new PortfolioitemAssessmentTransposed(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentTransposed where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentTransposed where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentTransposed where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentTransposed where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentTransposed whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
