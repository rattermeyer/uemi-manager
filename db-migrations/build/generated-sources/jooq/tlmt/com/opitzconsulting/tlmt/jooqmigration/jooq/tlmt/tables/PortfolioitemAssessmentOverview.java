/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemAssessmentOverviewRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemAssessmentOverview extends TableImpl<PortfolioitemAssessmentOverviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>tlmt.portfolioitem_assessment_overview</code>
     */
    public static final PortfolioitemAssessmentOverview PORTFOLIOITEM_ASSESSMENT_OVERVIEW = new PortfolioitemAssessmentOverview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemAssessmentOverviewRecord> getRecordType() {
        return PortfolioitemAssessmentOverviewRecord.class;
    }

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.portfolioitem_uuid</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, UUID> PORTFOLIOITEM_UUID = createField(DSL.name("portfolioitem_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.portfolioitem_id</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.portfolioitem_name</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.published_version_id</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, Long> PUBLISHED_VERSION_ID = createField(DSL.name("published_version_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.published_version</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> PUBLISHED_VERSION = createField(DSL.name("published_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.published_status</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> PUBLISHED_STATUS = createField(DSL.name("published_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.wip_status</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> WIP_STATUS = createField(DSL.name("wip_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.wip_version</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> WIP_VERSION = createField(DSL.name("wip_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.wip_version_id</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, Long> WIP_VERSION_ID = createField(DSL.name("wip_version_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_overview.reason</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_overview.tags_raw</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, String[]> TAGS_RAW = createField(DSL.name("tags_raw"), SQLDataType.VARCHAR.array(), this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_overview.tags</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, JSON> TAGS = createField(DSL.name("tags"), SQLDataType.JSON, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_overview.last_updated</code>.
     */
    public final TableField<PortfolioitemAssessmentOverviewRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6), this, "");

    private PortfolioitemAssessmentOverview(Name alias, Table<PortfolioitemAssessmentOverviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemAssessmentOverview(Name alias, Table<PortfolioitemAssessmentOverviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_assessment_overview" as  SELECT pi.uuid AS portfolioitem_uuid,
         pi.id AS portfolioitem_id,
         pi.name AS portfolioitem_name,
         pc.links_portfolio_version_id AS published_version_id,
         pc.links_version AS published_version,
         pc.links_status AS published_status,
         pc.rechts_status AS wip_status,
         pc.rechts_version AS wip_version,
         pc.rechts_portfolio_version_id AS wip_version_id,
         pc.reason,
         pi.tags AS tags_raw,
         pc.tags,
         pi.last_updated
        FROM (tlmt.portfolioitem pi
          JOIN tlmt.portfolio_changes pc ON (((pi.id = pc.portfolioitem_id) AND (pc.rechts_portfolio_version_id = ( SELECT pv.id
                FROM tlmt.portfolio_version pv
               WHERE (pv.published = false))) AND (pc.links_portfolio_version_id = ( SELECT
                     CASE
                         WHEN (( SELECT count(*) AS count
                            FROM tlmt.statuschange sc
                           WHERE (sc.portfolioitem_id = pi.id)) = 1) THEN ( SELECT pv.id
                            FROM tlmt.portfolio_version pv
                           WHERE (pv.published = false))
                         ELSE COALESCE(( SELECT pv.id
                            FROM tlmt.portfolio_version pv
                           WHERE (pv.published = true)
                           ORDER BY pv.published_timestamp DESC
                          LIMIT 1), ( SELECT pv.id
                            FROM tlmt.portfolio_version pv
                           ORDER BY pv.version DESC
                          LIMIT 1))
                     END AS "coalesce")))));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_overview</code>
     * table reference
     */
    public PortfolioitemAssessmentOverview(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_ASSESSMENT_OVERVIEW);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_overview</code>
     * table reference
     */
    public PortfolioitemAssessmentOverview(Name alias) {
        this(alias, PORTFOLIOITEM_ASSESSMENT_OVERVIEW);
    }

    /**
     * Create a <code>tlmt.portfolioitem_assessment_overview</code> table
     * reference
     */
    public PortfolioitemAssessmentOverview() {
        this(DSL.name("portfolioitem_assessment_overview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemAssessmentOverview as(String alias) {
        return new PortfolioitemAssessmentOverview(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemAssessmentOverview as(Name alias) {
        return new PortfolioitemAssessmentOverview(alias, this);
    }

    @Override
    public PortfolioitemAssessmentOverview as(Table<?> alias) {
        return new PortfolioitemAssessmentOverview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentOverview rename(String name) {
        return new PortfolioitemAssessmentOverview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentOverview rename(Name name) {
        return new PortfolioitemAssessmentOverview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentOverview rename(Table<?> name) {
        return new PortfolioitemAssessmentOverview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview where(Condition condition) {
        return new PortfolioitemAssessmentOverview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentOverview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentOverview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentOverview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentOverview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentOverview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
