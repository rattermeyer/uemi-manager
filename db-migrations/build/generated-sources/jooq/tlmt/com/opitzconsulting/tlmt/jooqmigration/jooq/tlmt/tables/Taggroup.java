/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Tag.TagPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TaggroupRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Taggroup extends TableImpl<TaggroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.taggroup</code>
     */
    public static final Taggroup TAGGROUP = new Taggroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaggroupRecord> getRecordType() {
        return TaggroupRecord.class;
    }

    /**
     * The column <code>tlmt.taggroup.id</code>.
     */
    public final TableField<TaggroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('tlmt.hibernate_sequence'::regclass)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tlmt.taggroup.taggrouptitle</code>.
     */
    public final TableField<TaggroupRecord, String> TAGGROUPTITLE = createField(DSL.name("taggrouptitle"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>tlmt.taggroup.backgroundcolor</code>.
     */
    public final TableField<TaggroupRecord, String> BACKGROUNDCOLOR = createField(DSL.name("backgroundcolor"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'#FFFFFF'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tlmt.taggroup.rule</code>.
     */
    public final TableField<TaggroupRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'OPTIONAL'::tlmt.tag_group_rule"), SQLDataType.VARCHAR)).asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>tlmt.taggroup.last_updated</code>.
     */
    public final TableField<TaggroupRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.taggroup.created_at</code>.
     */
    public final TableField<TaggroupRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.taggroup.tags</code>.
     */
    public final TableField<TaggroupRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("ARRAY[]::character varying[]"), SQLDataType.VARCHAR)).array(), this, "");

    /**
     * The column <code>tlmt.taggroup.uuid</code>.
     */
    public final TableField<TaggroupRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    private Taggroup(Name alias, Table<TaggroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Taggroup(Name alias, Table<TaggroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.taggroup</code> table reference
     */
    public Taggroup(String alias) {
        this(DSL.name(alias), TAGGROUP);
    }

    /**
     * Create an aliased <code>tlmt.taggroup</code> table reference
     */
    public Taggroup(Name alias) {
        this(alias, TAGGROUP);
    }

    /**
     * Create a <code>tlmt.taggroup</code> table reference
     */
    public Taggroup() {
        this(DSL.name("taggroup"), null);
    }

    public <O extends Record> Taggroup(Table<O> path, ForeignKey<O, TaggroupRecord> childPath, InverseForeignKey<O, TaggroupRecord> parentPath) {
        super(path, childPath, parentPath, TAGGROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TaggroupPath extends Taggroup implements Path<TaggroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TaggroupPath(Table<O> path, ForeignKey<O, TaggroupRecord> childPath, InverseForeignKey<O, TaggroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TaggroupPath(Name alias, Table<TaggroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TaggroupPath as(String alias) {
            return new TaggroupPath(DSL.name(alias), this);
        }

        @Override
        public TaggroupPath as(Name alias) {
            return new TaggroupPath(alias, this);
        }

        @Override
        public TaggroupPath as(Table<?> alias) {
            return new TaggroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public UniqueKey<TaggroupRecord> getPrimaryKey() {
        return Keys.TAGGROUP_PKEY;
    }

    @Override
    public List<UniqueKey<TaggroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_TAGGROUPTITLE);
    }

    private transient TagPath _tag;

    /**
     * Get the implicit to-many join path to the <code>tlmt.tag</code> table
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, null, Keys.TAG__TAG_GROUP_ID_FK.getInverseKey());

        return _tag;
    }

    @Override
    public Taggroup as(String alias) {
        return new Taggroup(DSL.name(alias), this);
    }

    @Override
    public Taggroup as(Name alias) {
        return new Taggroup(alias, this);
    }

    @Override
    public Taggroup as(Table<?> alias) {
        return new Taggroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Taggroup rename(String name) {
        return new Taggroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Taggroup rename(Name name) {
        return new Taggroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Taggroup rename(Table<?> name) {
        return new Taggroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup where(Condition condition) {
        return new Taggroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taggroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taggroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taggroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taggroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taggroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
