/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.EJoblevel;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.JobLevelMappingRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JobLevelMapping extends TableImpl<JobLevelMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.job_level_mapping</code>
     */
    public static final JobLevelMapping JOB_LEVEL_MAPPING = new JobLevelMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobLevelMappingRecord> getRecordType() {
        return JobLevelMappingRecord.class;
    }

    /**
     * The column <code>tlmt.job_level_mapping.joblevel</code>.
     */
    public final TableField<JobLevelMappingRecord, EJoblevel> JOBLEVEL = createField(DSL.name("joblevel"), SQLDataType.VARCHAR.asEnumDataType(EJoblevel.class), this, "");

    /**
     * The column <code>tlmt.job_level_mapping.import_joblevel</code>.
     */
    public final TableField<JobLevelMappingRecord, EJoblevel> IMPORT_JOBLEVEL = createField(DSL.name("import_joblevel"), SQLDataType.VARCHAR.asEnumDataType(EJoblevel.class), this, "");

    private JobLevelMapping(Name alias, Table<JobLevelMappingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JobLevelMapping(Name alias, Table<JobLevelMappingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.job_level_mapping</code> table reference
     */
    public JobLevelMapping(String alias) {
        this(DSL.name(alias), JOB_LEVEL_MAPPING);
    }

    /**
     * Create an aliased <code>tlmt.job_level_mapping</code> table reference
     */
    public JobLevelMapping(Name alias) {
        this(alias, JOB_LEVEL_MAPPING);
    }

    /**
     * Create a <code>tlmt.job_level_mapping</code> table reference
     */
    public JobLevelMapping() {
        this(DSL.name("job_level_mapping"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public JobLevelMapping as(String alias) {
        return new JobLevelMapping(DSL.name(alias), this);
    }

    @Override
    public JobLevelMapping as(Name alias) {
        return new JobLevelMapping(alias, this);
    }

    @Override
    public JobLevelMapping as(Table<?> alias) {
        return new JobLevelMapping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobLevelMapping rename(String name) {
        return new JobLevelMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobLevelMapping rename(Name name) {
        return new JobLevelMapping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobLevelMapping rename(Table<?> name) {
        return new JobLevelMapping(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping where(Condition condition) {
        return new JobLevelMapping(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobLevelMapping where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobLevelMapping where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobLevelMapping where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JobLevelMapping where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JobLevelMapping whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
