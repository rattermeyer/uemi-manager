/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Indexes;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioVersion.PortfolioVersionPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Portfolioitem.PortfolioitemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.StatuschangeRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Statuschange extends TableImpl<StatuschangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.statuschange</code>
     */
    public static final Statuschange STATUSCHANGE = new Statuschange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatuschangeRecord> getRecordType() {
        return StatuschangeRecord.class;
    }

    /**
     * The column <code>tlmt.statuschange.id</code>.
     */
    public final TableField<StatuschangeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.new_status</code>.
     */
    public final TableField<StatuschangeRecord, String> NEW_STATUS = createField(DSL.name("new_status"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.reason</code>.
     */
    public final TableField<StatuschangeRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.timestamp</code>.
     */
    public final TableField<StatuschangeRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.portfolioitem_id</code>.
     */
    public final TableField<StatuschangeRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.portfolio_version_id</code>.
     */
    public final TableField<StatuschangeRecord, Long> PORTFOLIO_VERSION_ID = createField(DSL.name("portfolio_version_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.statuschange.portfolio_version_uuid</code>.
     */
    public final TableField<StatuschangeRecord, UUID> PORTFOLIO_VERSION_UUID = createField(DSL.name("portfolio_version_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private Statuschange(Name alias, Table<StatuschangeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Statuschange(Name alias, Table<StatuschangeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.statuschange</code> table reference
     */
    public Statuschange(String alias) {
        this(DSL.name(alias), STATUSCHANGE);
    }

    /**
     * Create an aliased <code>tlmt.statuschange</code> table reference
     */
    public Statuschange(Name alias) {
        this(alias, STATUSCHANGE);
    }

    /**
     * Create a <code>tlmt.statuschange</code> table reference
     */
    public Statuschange() {
        this(DSL.name("statuschange"), null);
    }

    public <O extends Record> Statuschange(Table<O> path, ForeignKey<O, StatuschangeRecord> childPath, InverseForeignKey<O, StatuschangeRecord> parentPath) {
        super(path, childPath, parentPath, STATUSCHANGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class StatuschangePath extends Statuschange implements Path<StatuschangeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> StatuschangePath(Table<O> path, ForeignKey<O, StatuschangeRecord> childPath, InverseForeignKey<O, StatuschangeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private StatuschangePath(Name alias, Table<StatuschangeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public StatuschangePath as(String alias) {
            return new StatuschangePath(DSL.name(alias), this);
        }

        @Override
        public StatuschangePath as(Name alias) {
            return new StatuschangePath(alias, this);
        }

        @Override
        public StatuschangePath as(Table<?> alias) {
            return new StatuschangePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_STATUSCHANGE_TIMESTAMP);
    }

    @Override
    public UniqueKey<StatuschangeRecord> getPrimaryKey() {
        return Keys.STATUSCHANGE_PKEY;
    }

    @Override
    public List<ForeignKey<StatuschangeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STATUSCHANGE__FK_STATUSCHANGE, Keys.STATUSCHANGE__STATUSCHANGE_TECHRADAR_UUID_FKEY);
    }

    private transient PortfolioitemPath _portfolioitem;

    /**
     * Get the implicit join path to the <code>tlmt.portfolioitem</code> table.
     */
    public PortfolioitemPath portfolioitem() {
        if (_portfolioitem == null)
            _portfolioitem = new PortfolioitemPath(this, Keys.STATUSCHANGE__FK_STATUSCHANGE, null);

        return _portfolioitem;
    }

    private transient PortfolioVersionPath _portfolioVersion;

    /**
     * Get the implicit join path to the <code>tlmt.portfolio_version</code>
     * table.
     */
    public PortfolioVersionPath portfolioVersion() {
        if (_portfolioVersion == null)
            _portfolioVersion = new PortfolioVersionPath(this, Keys.STATUSCHANGE__STATUSCHANGE_TECHRADAR_UUID_FKEY, null);

        return _portfolioVersion;
    }

    @Override
    public Statuschange as(String alias) {
        return new Statuschange(DSL.name(alias), this);
    }

    @Override
    public Statuschange as(Name alias) {
        return new Statuschange(alias, this);
    }

    @Override
    public Statuschange as(Table<?> alias) {
        return new Statuschange(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statuschange rename(String name) {
        return new Statuschange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statuschange rename(Name name) {
        return new Statuschange(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statuschange rename(Table<?> name) {
        return new Statuschange(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange where(Condition condition) {
        return new Statuschange(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statuschange where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statuschange where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statuschange where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Statuschange where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Statuschange whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
