/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Portfolioitem.PortfolioitemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.MergehistoryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Mergehistory extends TableImpl<MergehistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.mergehistory</code>
     */
    public static final Mergehistory MERGEHISTORY = new Mergehistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MergehistoryRecord> getRecordType() {
        return MergehistoryRecord.class;
    }

    /**
     * The column <code>tlmt.mergehistory.id</code>.
     */
    public final TableField<MergehistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.mergehistory.reason</code>.
     */
    public final TableField<MergehistoryRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.mergehistory.merge_timestamp</code>.
     */
    public final TableField<MergehistoryRecord, OffsetDateTime> MERGE_TIMESTAMP = createField(DSL.name("merge_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>tlmt.mergehistory.from_id</code>.
     */
    public final TableField<MergehistoryRecord, Long> FROM_ID = createField(DSL.name("from_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.mergehistory.to_id</code>.
     */
    public final TableField<MergehistoryRecord, Long> TO_ID = createField(DSL.name("to_id"), SQLDataType.BIGINT, this, "");

    private Mergehistory(Name alias, Table<MergehistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Mergehistory(Name alias, Table<MergehistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.mergehistory</code> table reference
     */
    public Mergehistory(String alias) {
        this(DSL.name(alias), MERGEHISTORY);
    }

    /**
     * Create an aliased <code>tlmt.mergehistory</code> table reference
     */
    public Mergehistory(Name alias) {
        this(alias, MERGEHISTORY);
    }

    /**
     * Create a <code>tlmt.mergehistory</code> table reference
     */
    public Mergehistory() {
        this(DSL.name("mergehistory"), null);
    }

    public <O extends Record> Mergehistory(Table<O> path, ForeignKey<O, MergehistoryRecord> childPath, InverseForeignKey<O, MergehistoryRecord> parentPath) {
        super(path, childPath, parentPath, MERGEHISTORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MergehistoryPath extends Mergehistory implements Path<MergehistoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MergehistoryPath(Table<O> path, ForeignKey<O, MergehistoryRecord> childPath, InverseForeignKey<O, MergehistoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MergehistoryPath(Name alias, Table<MergehistoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MergehistoryPath as(String alias) {
            return new MergehistoryPath(DSL.name(alias), this);
        }

        @Override
        public MergehistoryPath as(Name alias) {
            return new MergehistoryPath(alias, this);
        }

        @Override
        public MergehistoryPath as(Table<?> alias) {
            return new MergehistoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public UniqueKey<MergehistoryRecord> getPrimaryKey() {
        return Keys.MERGEHISTORY_PKEY;
    }

    @Override
    public List<ForeignKey<MergehistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MERGEHISTORY__FK_MERGEHISTORY_FROM, Keys.MERGEHISTORY__FK_MERGEHISTORY_TO);
    }

    private transient PortfolioitemPath _fkMergehistoryFrom;

    /**
     * Get the implicit join path to the <code>tlmt.portfolioitem</code> table,
     * via the <code>fk_mergehistory_from</code> key.
     */
    public PortfolioitemPath fkMergehistoryFrom() {
        if (_fkMergehistoryFrom == null)
            _fkMergehistoryFrom = new PortfolioitemPath(this, Keys.MERGEHISTORY__FK_MERGEHISTORY_FROM, null);

        return _fkMergehistoryFrom;
    }

    private transient PortfolioitemPath _fkMergehistoryTo;

    /**
     * Get the implicit join path to the <code>tlmt.portfolioitem</code> table,
     * via the <code>fk_mergehistory_to</code> key.
     */
    public PortfolioitemPath fkMergehistoryTo() {
        if (_fkMergehistoryTo == null)
            _fkMergehistoryTo = new PortfolioitemPath(this, Keys.MERGEHISTORY__FK_MERGEHISTORY_TO, null);

        return _fkMergehistoryTo;
    }

    @Override
    public Mergehistory as(String alias) {
        return new Mergehistory(DSL.name(alias), this);
    }

    @Override
    public Mergehistory as(Name alias) {
        return new Mergehistory(alias, this);
    }

    @Override
    public Mergehistory as(Table<?> alias) {
        return new Mergehistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mergehistory rename(String name) {
        return new Mergehistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mergehistory rename(Name name) {
        return new Mergehistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mergehistory rename(Table<?> name) {
        return new Mergehistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory where(Condition condition) {
        return new Mergehistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mergehistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mergehistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mergehistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Mergehistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Mergehistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
