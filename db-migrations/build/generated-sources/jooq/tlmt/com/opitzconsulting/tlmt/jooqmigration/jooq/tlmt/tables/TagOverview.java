/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TagOverviewRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.TagSummary;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.paths.TagSummaryPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.records.TagSummaryRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TagOverview extends TableImpl<TagOverviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.tag_overview</code>
     */
    public static final TagOverview TAG_OVERVIEW = new TagOverview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagOverviewRecord> getRecordType() {
        return TagOverviewRecord.class;
    }

    /**
     * The column <code>tlmt.tag_overview.tag</code>.
     */
    public final TableField<TagOverviewRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>tlmt.tag_overview.taggrouptitle</code>.
     */
    public final TableField<TagOverviewRecord, String> TAGGROUPTITLE = createField(DSL.name("taggrouptitle"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.tag_overview.backgroundcolor</code>.
     */
    public final TableField<TagOverviewRecord, String> BACKGROUNDCOLOR = createField(DSL.name("backgroundcolor"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.tag_overview.rule</code>.
     */
    public final TableField<TagOverviewRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>tlmt.tag_overview.tag_group_uuid</code>.
     */
    public final TableField<TagOverviewRecord, UUID> TAG_GROUP_UUID = createField(DSL.name("tag_group_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.tag_overview.tag_summary</code>.
     */
    public final TagSummaryPath<TagOverviewRecord, TagSummaryRecord> TAG_SUMMARY = Internal.createUDTPathTableField(DSL.name("tag_summary"), TagSummary.TAG_SUMMARY.getDataType(), this, "", TagSummaryPath.class);

    /**
     * The column <code>tlmt.tag_overview.tag_summary_json</code>.
     */
    public final TableField<TagOverviewRecord, JSON> TAG_SUMMARY_JSON = createField(DSL.name("tag_summary_json"), SQLDataType.JSON, this, "");

    /**
     * The column <code>tlmt.tag_overview.count</code>.
     */
    public final TableField<TagOverviewRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT, this, "");

    private TagOverview(Name alias, Table<TagOverviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TagOverview(Name alias, Table<TagOverviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "tag_overview" as  SELECT tag,
         taggrouptitle,
         backgroundcolor,
         rule,
         uuid AS tag_group_uuid,
         ROW((tag)::character varying(32), taggrouptitle, backgroundcolor)::tlmt.tag_summary AS tag_summary,
         json_build_object('tag', tag, 'taggroup', taggrouptitle, 'backgroundcolor', backgroundcolor) AS tag_summary_json,
         ( SELECT count(*) AS count
                FROM tlmt.portfolioitem pi
               WHERE ((ARRAY[tg.tag] <@ pi.tags) AND (pi.active = true))) AS count
        FROM ( SELECT taggroup.taggrouptitle,
                 taggroup.backgroundcolor,
                 taggroup.rule,
                 unnest(taggroup.tags) AS tag,
                 taggroup.uuid
                FROM tlmt.taggroup) tg;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.tag_overview</code> table reference
     */
    public TagOverview(String alias) {
        this(DSL.name(alias), TAG_OVERVIEW);
    }

    /**
     * Create an aliased <code>tlmt.tag_overview</code> table reference
     */
    public TagOverview(Name alias) {
        this(alias, TAG_OVERVIEW);
    }

    /**
     * Create a <code>tlmt.tag_overview</code> table reference
     */
    public TagOverview() {
        this(DSL.name("tag_overview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public TagOverview as(String alias) {
        return new TagOverview(DSL.name(alias), this);
    }

    @Override
    public TagOverview as(Name alias) {
        return new TagOverview(alias, this);
    }

    @Override
    public TagOverview as(Table<?> alias) {
        return new TagOverview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagOverview rename(String name) {
        return new TagOverview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagOverview rename(Name name) {
        return new TagOverview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagOverview rename(Table<?> name) {
        return new TagOverview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview where(Condition condition) {
        return new TagOverview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagOverview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagOverview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagOverview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagOverview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagOverview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
