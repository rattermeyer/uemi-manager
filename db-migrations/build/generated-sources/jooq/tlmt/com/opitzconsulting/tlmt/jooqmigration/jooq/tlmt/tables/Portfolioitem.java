/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Indexes;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.ItemLink.ItemLinkPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Mergehistory.MergehistoryPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioitemTag.PortfolioitemTagPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Statuschange.StatuschangePath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Tag.TagPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Portfolioitem extends TableImpl<PortfolioitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem</code>
     */
    public static final Portfolioitem PORTFOLIOITEM = new Portfolioitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemRecord> getRecordType() {
        return PortfolioitemRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem.id</code>.
     */
    public final TableField<PortfolioitemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('tlmt.hibernate_sequence'::regclass)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.active</code>.
     */
    public final TableField<PortfolioitemRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.description</code>.
     */
    public final TableField<PortfolioitemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>tlmt.portfolioitem.merged</code>.
     */
    public final TableField<PortfolioitemRecord, Boolean> MERGED = createField(DSL.name("merged"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.name</code>.
     */
    public final TableField<PortfolioitemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>tlmt.portfolioitem.skill_name</code>.
     */
    public final TableField<PortfolioitemRecord, String> SKILL_NAME = createField(DSL.name("skill_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>tlmt.portfolioitem.uuid</code>.
     */
    public final TableField<PortfolioitemRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.last_updated</code>.
     */
    public final TableField<PortfolioitemRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.created_at</code>.
     */
    public final TableField<PortfolioitemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.portfolioitem.tags</code>.
     */
    public final TableField<PortfolioitemRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("ARRAY[]::character varying[]"), SQLDataType.VARCHAR)).array(), this, "");

    private Portfolioitem(Name alias, Table<PortfolioitemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Portfolioitem(Name alias, Table<PortfolioitemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem</code> table reference
     */
    public Portfolioitem(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem</code> table reference
     */
    public Portfolioitem(Name alias) {
        this(alias, PORTFOLIOITEM);
    }

    /**
     * Create a <code>tlmt.portfolioitem</code> table reference
     */
    public Portfolioitem() {
        this(DSL.name("portfolioitem"), null);
    }

    public <O extends Record> Portfolioitem(Table<O> path, ForeignKey<O, PortfolioitemRecord> childPath, InverseForeignKey<O, PortfolioitemRecord> parentPath) {
        super(path, childPath, parentPath, PORTFOLIOITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PortfolioitemPath extends Portfolioitem implements Path<PortfolioitemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PortfolioitemPath(Table<O> path, ForeignKey<O, PortfolioitemRecord> childPath, InverseForeignKey<O, PortfolioitemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PortfolioitemPath(Name alias, Table<PortfolioitemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PortfolioitemPath as(String alias) {
            return new PortfolioitemPath(DSL.name(alias), this);
        }

        @Override
        public PortfolioitemPath as(Name alias) {
            return new PortfolioitemPath(alias, this);
        }

        @Override
        public PortfolioitemPath as(Table<?> alias) {
            return new PortfolioitemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PORTFOLIOITEM_TAGS, Indexes.INDEX_PORTFOLIOITEM_NAME);
    }

    @Override
    public UniqueKey<PortfolioitemRecord> getPrimaryKey() {
        return Keys.PORTFOLIOITEM_PKEY;
    }

    @Override
    public List<UniqueKey<PortfolioitemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_PORTFOLIOITEM, Keys.UQ_PORTFOLIOITEM_UUID);
    }

    private transient ItemLinkPath _itemLink;

    /**
     * Get the implicit to-many join path to the <code>tlmt.item_link</code>
     * table
     */
    public ItemLinkPath itemLink() {
        if (_itemLink == null)
            _itemLink = new ItemLinkPath(this, null, Keys.ITEM_LINK__ITEM_LINK_PORTFOLIOITEM_ID_FKEY.getInverseKey());

        return _itemLink;
    }

    private transient MergehistoryPath _fkMergehistoryFrom;

    /**
     * Get the implicit to-many join path to the <code>tlmt.mergehistory</code>
     * table, via the <code>fk_mergehistory_from</code> key
     */
    public MergehistoryPath fkMergehistoryFrom() {
        if (_fkMergehistoryFrom == null)
            _fkMergehistoryFrom = new MergehistoryPath(this, null, Keys.MERGEHISTORY__FK_MERGEHISTORY_FROM.getInverseKey());

        return _fkMergehistoryFrom;
    }

    private transient MergehistoryPath _fkMergehistoryTo;

    /**
     * Get the implicit to-many join path to the <code>tlmt.mergehistory</code>
     * table, via the <code>fk_mergehistory_to</code> key
     */
    public MergehistoryPath fkMergehistoryTo() {
        if (_fkMergehistoryTo == null)
            _fkMergehistoryTo = new MergehistoryPath(this, null, Keys.MERGEHISTORY__FK_MERGEHISTORY_TO.getInverseKey());

        return _fkMergehistoryTo;
    }

    private transient PortfolioitemTagPath _portfolioitemTag;

    /**
     * Get the implicit to-many join path to the
     * <code>tlmt.portfolioitem_tag</code> table
     */
    public PortfolioitemTagPath portfolioitemTag() {
        if (_portfolioitemTag == null)
            _portfolioitemTag = new PortfolioitemTagPath(this, null, Keys.PORTFOLIOITEM_TAG__FK_PORTFOLIOITEM_TAG_PORTFOLIOITEM_TAG.getInverseKey());

        return _portfolioitemTag;
    }

    private transient StatuschangePath _statuschange;

    /**
     * Get the implicit to-many join path to the <code>tlmt.statuschange</code>
     * table
     */
    public StatuschangePath statuschange() {
        if (_statuschange == null)
            _statuschange = new StatuschangePath(this, null, Keys.STATUSCHANGE__FK_STATUSCHANGE.getInverseKey());

        return _statuschange;
    }

    /**
     * Get the implicit many-to-many join path to the <code>tlmt.tag</code>
     * table
     */
    public TagPath tag() {
        return portfolioitemTag().tag();
    }

    @Override
    public Portfolioitem as(String alias) {
        return new Portfolioitem(DSL.name(alias), this);
    }

    @Override
    public Portfolioitem as(Name alias) {
        return new Portfolioitem(alias, this);
    }

    @Override
    public Portfolioitem as(Table<?> alias) {
        return new Portfolioitem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Portfolioitem rename(String name) {
        return new Portfolioitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Portfolioitem rename(Name name) {
        return new Portfolioitem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Portfolioitem rename(Table<?> name) {
        return new Portfolioitem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem where(Condition condition) {
        return new Portfolioitem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Portfolioitem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Portfolioitem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Portfolioitem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Portfolioitem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Portfolioitem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
