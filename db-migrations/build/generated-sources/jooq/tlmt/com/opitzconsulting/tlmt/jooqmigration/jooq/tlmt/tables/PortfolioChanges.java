/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioChangesRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.TagSummary;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.records.TagSummaryRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioChanges extends TableImpl<PortfolioChangesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolio_changes</code>
     */
    public static final PortfolioChanges PORTFOLIO_CHANGES = new PortfolioChanges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioChangesRecord> getRecordType() {
        return PortfolioChangesRecord.class;
    }

    /**
     * The column <code>tlmt.portfolio_changes.portfolioitem_uuid</code>.
     */
    public final TableField<PortfolioChangesRecord, UUID> PORTFOLIOITEM_UUID = createField(DSL.name("portfolioitem_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.portfolioitem_id</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.portfolioitem_name</code>.
     */
    public final TableField<PortfolioChangesRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.last_updated</code>.
     */
    public final TableField<PortfolioChangesRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.links_change_id</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> LINKS_CHANGE_ID = createField(DSL.name("links_change_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolio_changes.links_portfolio_version_id</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> LINKS_PORTFOLIO_VERSION_ID = createField(DSL.name("links_portfolio_version_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolio_changes.links_portfolio_version_uuid</code>.
     */
    public final TableField<PortfolioChangesRecord, UUID> LINKS_PORTFOLIO_VERSION_UUID = createField(DSL.name("links_portfolio_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.links_version</code>.
     */
    public final TableField<PortfolioChangesRecord, String> LINKS_VERSION = createField(DSL.name("links_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.links_status</code>.
     */
    public final TableField<PortfolioChangesRecord, String> LINKS_STATUS = createField(DSL.name("links_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.rechts_status</code>.
     */
    public final TableField<PortfolioChangesRecord, String> RECHTS_STATUS = createField(DSL.name("rechts_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.rechts_version</code>.
     */
    public final TableField<PortfolioChangesRecord, String> RECHTS_VERSION = createField(DSL.name("rechts_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tlmt.portfolio_changes.rechts_portfolio_version_id</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> RECHTS_PORTFOLIO_VERSION_ID = createField(DSL.name("rechts_portfolio_version_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolio_changes.rechts_portfolio_version_uuid</code>.
     */
    public final TableField<PortfolioChangesRecord, UUID> RECHTS_PORTFOLIO_VERSION_UUID = createField(DSL.name("rechts_portfolio_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.reason</code>.
     */
    public final TableField<PortfolioChangesRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.rechts_change_id</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> RECHTS_CHANGE_ID = createField(DSL.name("rechts_change_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.tags_raw</code>.
     */
    public final TableField<PortfolioChangesRecord, TagSummaryRecord[]> TAGS_RAW = createField(DSL.name("tags_raw"), TagSummary.TAG_SUMMARY.getDataType().array(), this, "");

    /**
     * The column <code>tlmt.portfolio_changes.tags</code>.
     */
    public final TableField<PortfolioChangesRecord, JSON> TAGS = createField(DSL.name("tags"), SQLDataType.JSON, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.status_changed</code>.
     */
    public final TableField<PortfolioChangesRecord, Boolean> STATUS_CHANGED = createField(DSL.name("status_changed"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.links_status_value</code>.
     */
    public final TableField<PortfolioChangesRecord, Integer> LINKS_STATUS_VALUE = createField(DSL.name("links_status_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.rechts_status_value</code>.
     */
    public final TableField<PortfolioChangesRecord, Integer> RECHTS_STATUS_VALUE = createField(DSL.name("rechts_status_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolio_changes.distance</code>.
     */
    public final TableField<PortfolioChangesRecord, Long> DISTANCE = createField(DSL.name("distance"), SQLDataType.BIGINT, this, "");

    private PortfolioChanges(Name alias, Table<PortfolioChangesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioChanges(Name alias, Table<PortfolioChangesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolio_changes" as  WITH most_relevant_sc AS (
                SELECT statuschange.id,
                   statuschange.new_status,
                   statuschange.reason,
                   statuschange."timestamp",
                   statuschange.portfolioitem_id,
                   statuschange.portfolio_version_id,
                   statuschange.portfolio_version_uuid,
                   row_number() OVER (PARTITION BY statuschange.portfolioitem_id, statuschange.portfolio_version_id ORDER BY statuschange."timestamp" DESC) AS rn
                  FROM tlmt.statuschange
                 WHERE (statuschange.portfolio_version_uuid IS NOT NULL)
               ), trindex AS (
                SELECT sub.id,
                   sub.published,
                   sub.published_timestamp,
                   sub.uuid,
                   sub.version,
                   row_number() OVER () AS index
                  FROM ( SELECT portfolio_version.id,
                           portfolio_version.published,
                           portfolio_version.published_timestamp,
                           portfolio_version.uuid,
                           portfolio_version.version
                          FROM tlmt.portfolio_version
                         ORDER BY portfolio_version.published_timestamp) sub
               )
        SELECT pi.uuid AS portfolioitem_uuid,
           pi.id AS portfolioitem_id,
           pi.name AS portfolioitem_name,
           pi.last_updated,
           links.id AS links_change_id,
           links_tr.id AS links_portfolio_version_id,
           links_tr.uuid AS links_portfolio_version_uuid,
           links_tr.version AS links_version,
           links.new_status AS links_status,
           rechts.new_status AS rechts_status,
           rechts_tr.version AS rechts_version,
           rechts_tr.id AS rechts_portfolio_version_id,
           rechts_tr.uuid AS rechts_portfolio_version_uuid,
           rechts.reason,
           rechts.id AS rechts_change_id,
           tags.tags AS tags_raw,
               CASE
                   WHEN ((array_length(tags.tags, 1) = 1) AND (tags.tags[1] IS NULL)) THEN '[]'::json
                   ELSE to_json(tags.tags)
               END AS tags,
           ((links.new_status)::text <> (rechts.new_status)::text) AS status_changed,
               CASE
                   WHEN ((links.new_status)::text = 'NEW'::text) THEN 0
                   WHEN ((links.new_status)::text = 'END_OF_LIFE'::text) THEN 1
                   WHEN ((links.new_status)::text = 'NOT_IN_FOCUS'::text) THEN 2
                   WHEN ((links.new_status)::text = 'ASSESS'::text) THEN 3
                   WHEN ((links.new_status)::text = 'TRIAL'::text) THEN 4
                   WHEN ((links.new_status)::text = 'PORTFOLIO'::text) THEN 5
                   WHEN ((links.new_status)::text = 'ON_HOLD'::text) THEN 6
                   ELSE '-1'::integer
               END AS links_status_value,
               CASE
                   WHEN ((rechts.new_status)::text = 'NEW'::text) THEN 0
                   WHEN ((rechts.new_status)::text = 'END_OF_LIFE'::text) THEN 1
                   WHEN ((rechts.new_status)::text = 'NOT_IN_FOCUS'::text) THEN 2
                   WHEN ((rechts.new_status)::text = 'ASSESS'::text) THEN 3
                   WHEN ((rechts.new_status)::text = 'TRIAL'::text) THEN 4
                   WHEN ((rechts.new_status)::text = 'PORTFOLIO'::text) THEN 5
                   WHEN ((rechts.new_status)::text = 'ON_HOLD'::text) THEN 6
                   ELSE '-1'::integer
               END AS rechts_status_value,
           (( SELECT trindex.index
                  FROM trindex
                 WHERE ((trindex.version)::text = (rechts_tr.version)::text)) - ( SELECT trindex.index
                  FROM trindex
                 WHERE ((trindex.version)::text = (links_tr.version)::text))) AS distance
          FROM (((((most_relevant_sc rechts
            JOIN tlmt.portfolio_version rechts_tr ON (((rechts.portfolio_version_uuid = rechts_tr.uuid) AND (rechts_tr.version IS NOT NULL))))
            JOIN tlmt.portfolioitem pi ON ((rechts.portfolioitem_id = pi.id)))
            JOIN ( SELECT pi_1.id AS portfolioitem_id,
                   array_agg(ROW((tov.tag)::character varying(32), tov.taggrouptitle, tov.backgroundcolor)::tlmt.tag_summary) AS tags
                  FROM (( SELECT pi_2.id,
                           pi_2.active,
                           pi_2.description,
                           pi_2.merged,
                           pi_2.name,
                           pi_2.skill_name,
                           pi_2.uuid,
                           pi_2.last_updated,
                           pi_2.created_at,
                           pi_2.tags,
                           unnest(
                               CASE
                                   WHEN (pi_2.tags <> '{}'::character varying[]) THEN pi_2.tags
                                   ELSE '{NULL}'::character varying[]
                               END) AS tag
                          FROM tlmt.portfolioitem pi_2) pi_1
                    LEFT JOIN tlmt.tag_overview tov ON (((pi_1.tag)::text = (tov.tag)::text)))
                 GROUP BY pi_1.id) tags ON ((tags.portfolioitem_id = pi.id)))
            LEFT JOIN most_relevant_sc links ON ((rechts.portfolioitem_id = links.portfolioitem_id)))
            JOIN tlmt.portfolio_version links_tr ON (((links.portfolio_version_uuid = links_tr.uuid) AND (links_tr.version IS NOT NULL))))
         WHERE ((rechts.rn = 1) AND (links.rn = 1) AND (links."timestamp" <= rechts."timestamp") AND (links.portfolioitem_id = rechts.portfolioitem_id) AND (pi.active = true));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_changes</code> table reference
     */
    public PortfolioChanges(String alias) {
        this(DSL.name(alias), PORTFOLIO_CHANGES);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_changes</code> table reference
     */
    public PortfolioChanges(Name alias) {
        this(alias, PORTFOLIO_CHANGES);
    }

    /**
     * Create a <code>tlmt.portfolio_changes</code> table reference
     */
    public PortfolioChanges() {
        this(DSL.name("portfolio_changes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioChanges as(String alias) {
        return new PortfolioChanges(DSL.name(alias), this);
    }

    @Override
    public PortfolioChanges as(Name alias) {
        return new PortfolioChanges(alias, this);
    }

    @Override
    public PortfolioChanges as(Table<?> alias) {
        return new PortfolioChanges(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChanges rename(String name) {
        return new PortfolioChanges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChanges rename(Name name) {
        return new PortfolioChanges(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChanges rename(Table<?> name) {
        return new PortfolioChanges(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges where(Condition condition) {
        return new PortfolioChanges(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChanges where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChanges where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChanges where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChanges where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChanges whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
