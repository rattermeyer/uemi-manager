/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Indexes;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Statuschange.StatuschangePath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioVersionRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioVersion extends TableImpl<PortfolioVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolio_version</code>
     */
    public static final PortfolioVersion PORTFOLIO_VERSION = new PortfolioVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioVersionRecord> getRecordType() {
        return PortfolioVersionRecord.class;
    }

    /**
     * The column <code>tlmt.portfolio_version.id</code>.
     */
    public final TableField<PortfolioVersionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tlmt.portfolio_version.published</code>.
     */
    public final TableField<PortfolioVersionRecord, Boolean> PUBLISHED = createField(DSL.name("published"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>tlmt.portfolio_version.published_timestamp</code>.
     */
    public final TableField<PortfolioVersionRecord, OffsetDateTime> PUBLISHED_TIMESTAMP = createField(DSL.name("published_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>tlmt.portfolio_version.uuid</code>.
     */
    public final TableField<PortfolioVersionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>tlmt.portfolio_version.version</code>.
     */
    public final TableField<PortfolioVersionRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private PortfolioVersion(Name alias, Table<PortfolioVersionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioVersion(Name alias, Table<PortfolioVersionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_version</code> table reference
     */
    public PortfolioVersion(String alias) {
        this(DSL.name(alias), PORTFOLIO_VERSION);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_version</code> table reference
     */
    public PortfolioVersion(Name alias) {
        this(alias, PORTFOLIO_VERSION);
    }

    /**
     * Create a <code>tlmt.portfolio_version</code> table reference
     */
    public PortfolioVersion() {
        this(DSL.name("portfolio_version"), null);
    }

    public <O extends Record> PortfolioVersion(Table<O> path, ForeignKey<O, PortfolioVersionRecord> childPath, InverseForeignKey<O, PortfolioVersionRecord> parentPath) {
        super(path, childPath, parentPath, PORTFOLIO_VERSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PortfolioVersionPath extends PortfolioVersion implements Path<PortfolioVersionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PortfolioVersionPath(Table<O> path, ForeignKey<O, PortfolioVersionRecord> childPath, InverseForeignKey<O, PortfolioVersionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PortfolioVersionPath(Name alias, Table<PortfolioVersionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PortfolioVersionPath as(String alias) {
            return new PortfolioVersionPath(DSL.name(alias), this);
        }

        @Override
        public PortfolioVersionPath as(Name alias) {
            return new PortfolioVersionPath(alias, this);
        }

        @Override
        public PortfolioVersionPath as(Table<?> alias) {
            return new PortfolioVersionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PORTFOLIO_VERSION_PUBLISHED_TIMESTAMP);
    }

    @Override
    public Identity<PortfolioVersionRecord, Long> getIdentity() {
        return (Identity<PortfolioVersionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PortfolioVersionRecord> getPrimaryKey() {
        return Keys.TECHRADAR_PKEY;
    }

    @Override
    public List<UniqueKey<PortfolioVersionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_UUID, Keys.RADAR_VERSION_UNIQUE);
    }

    private transient StatuschangePath _statuschange;

    /**
     * Get the implicit to-many join path to the <code>tlmt.statuschange</code>
     * table
     */
    public StatuschangePath statuschange() {
        if (_statuschange == null)
            _statuschange = new StatuschangePath(this, null, Keys.STATUSCHANGE__STATUSCHANGE_TECHRADAR_UUID_FKEY.getInverseKey());

        return _statuschange;
    }

    @Override
    public PortfolioVersion as(String alias) {
        return new PortfolioVersion(DSL.name(alias), this);
    }

    @Override
    public PortfolioVersion as(Name alias) {
        return new PortfolioVersion(alias, this);
    }

    @Override
    public PortfolioVersion as(Table<?> alias) {
        return new PortfolioVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioVersion rename(String name) {
        return new PortfolioVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioVersion rename(Name name) {
        return new PortfolioVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioVersion rename(Table<?> name) {
        return new PortfolioVersion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion where(Condition condition) {
        return new PortfolioVersion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioVersion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioVersion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioVersion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioVersion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioVersion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
