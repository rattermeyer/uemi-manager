/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioDevOpsCountRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioDevOpsCount extends TableImpl<PortfolioDevOpsCountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolio_dev_ops_count</code>
     */
    public static final PortfolioDevOpsCount PORTFOLIO_DEV_OPS_COUNT = new PortfolioDevOpsCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioDevOpsCountRecord> getRecordType() {
        return PortfolioDevOpsCountRecord.class;
    }

    /**
     * The column <code>tlmt.portfolio_dev_ops_count.only_dev</code>.
     */
    public final TableField<PortfolioDevOpsCountRecord, Long> ONLY_DEV = createField(DSL.name("only_dev"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_dev_ops_count.only_ops</code>.
     */
    public final TableField<PortfolioDevOpsCountRecord, Long> ONLY_OPS = createField(DSL.name("only_ops"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_dev_ops_count.combined_count</code>.
     */
    public final TableField<PortfolioDevOpsCountRecord, Long> COMBINED_COUNT = createField(DSL.name("combined_count"), SQLDataType.BIGINT, this, "");

    private PortfolioDevOpsCount(Name alias, Table<PortfolioDevOpsCountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioDevOpsCount(Name alias, Table<PortfolioDevOpsCountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolio_dev_ops_count" as  SELECT (dev_count - combined_count) AS only_dev,
         (ops_clount - combined_count) AS only_ops,
         combined_count
        FROM ( SELECT ( SELECT count(*) AS dev_count
                        FROM tlmt.portfolioitem
                       WHERE (ARRAY['portfolio:development'::character varying] <@ portfolioitem.tags)) AS dev_count,
                 ( SELECT count(*) AS ops_count
                        FROM tlmt.portfolioitem
                       WHERE (ARRAY['portfolio:operations'::character varying] <@ portfolioitem.tags)) AS ops_clount,
                 ( SELECT count(*) AS combined_count
                        FROM tlmt.portfolioitem
                       WHERE (ARRAY['portfolio:development'::character varying, 'portfolio:operations'::character varying] <@ portfolioitem.tags)) AS combined_count) unnamed_subquery;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_dev_ops_count</code> table
     * reference
     */
    public PortfolioDevOpsCount(String alias) {
        this(DSL.name(alias), PORTFOLIO_DEV_OPS_COUNT);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_dev_ops_count</code> table
     * reference
     */
    public PortfolioDevOpsCount(Name alias) {
        this(alias, PORTFOLIO_DEV_OPS_COUNT);
    }

    /**
     * Create a <code>tlmt.portfolio_dev_ops_count</code> table reference
     */
    public PortfolioDevOpsCount() {
        this(DSL.name("portfolio_dev_ops_count"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioDevOpsCount as(String alias) {
        return new PortfolioDevOpsCount(DSL.name(alias), this);
    }

    @Override
    public PortfolioDevOpsCount as(Name alias) {
        return new PortfolioDevOpsCount(alias, this);
    }

    @Override
    public PortfolioDevOpsCount as(Table<?> alias) {
        return new PortfolioDevOpsCount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioDevOpsCount rename(String name) {
        return new PortfolioDevOpsCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioDevOpsCount rename(Name name) {
        return new PortfolioDevOpsCount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioDevOpsCount rename(Table<?> name) {
        return new PortfolioDevOpsCount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount where(Condition condition) {
        return new PortfolioDevOpsCount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioDevOpsCount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioDevOpsCount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioDevOpsCount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioDevOpsCount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioDevOpsCount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
