/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemActiveRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.TagSummary;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.records.TagSummaryRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemActive extends TableImpl<PortfolioitemActiveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem_active</code>
     */
    public static final PortfolioitemActive PORTFOLIOITEM_ACTIVE = new PortfolioitemActive();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemActiveRecord> getRecordType() {
        return PortfolioitemActiveRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_active.id</code>.
     */
    public final TableField<PortfolioitemActiveRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_active.uuid</code>.
     */
    public final TableField<PortfolioitemActiveRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolioitem_active.name</code>.
     */
    public final TableField<PortfolioitemActiveRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_active.tags_raw</code>.
     */
    public final TableField<PortfolioitemActiveRecord, TagSummaryRecord[]> TAGS_RAW = createField(DSL.name("tags_raw"), TagSummary.TAG_SUMMARY.getDataType().array(), this, "");

    /**
     * The column <code>tlmt.portfolioitem_active.tags</code>.
     */
    public final TableField<PortfolioitemActiveRecord, JSON> TAGS = createField(DSL.name("tags"), SQLDataType.JSON, this, "");

    private PortfolioitemActive(Name alias, Table<PortfolioitemActiveRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemActive(Name alias, Table<PortfolioitemActiveRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_active" as  SELECT a.id,
          a.uuid,
          a.name,
          array_agg(ROW((tov.tag)::character varying(32), tov.taggrouptitle, tov.backgroundcolor)::tlmt.tag_summary) AS tags_raw,
          json_agg(ROW((tov.tag)::character varying(32), tov.taggrouptitle, tov.backgroundcolor)::tlmt.tag_summary) AS tags
         FROM (( SELECT pi.id,
                  pi.active,
                  pi.description,
                  pi.merged,
                  pi.name,
                  pi.skill_name,
                  pi.uuid,
                  pi.last_updated,
                  pi.created_at,
                  pi.tags
                 FROM tlmt.portfolioitem pi
                WHERE (ARRAY['mostly-AWS'::character varying] <@ pi.tags)) a
           JOIN tlmt.tag_overview tov ON ((a.tags && ARRAY[tov.tag])))
        WHERE ((a.active = true) AND (a.merged = false))
        GROUP BY a.id, a.uuid, a.name;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_active</code> table reference
     */
    public PortfolioitemActive(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_ACTIVE);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_active</code> table reference
     */
    public PortfolioitemActive(Name alias) {
        this(alias, PORTFOLIOITEM_ACTIVE);
    }

    /**
     * Create a <code>tlmt.portfolioitem_active</code> table reference
     */
    public PortfolioitemActive() {
        this(DSL.name("portfolioitem_active"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemActive as(String alias) {
        return new PortfolioitemActive(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemActive as(Name alias) {
        return new PortfolioitemActive(alias, this);
    }

    @Override
    public PortfolioitemActive as(Table<?> alias) {
        return new PortfolioitemActive(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemActive rename(String name) {
        return new PortfolioitemActive(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemActive rename(Name name) {
        return new PortfolioitemActive(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemActive rename(Table<?> name) {
        return new PortfolioitemActive(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive where(Condition condition) {
        return new PortfolioitemActive(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemActive where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemActive where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemActive where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemActive where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemActive whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
