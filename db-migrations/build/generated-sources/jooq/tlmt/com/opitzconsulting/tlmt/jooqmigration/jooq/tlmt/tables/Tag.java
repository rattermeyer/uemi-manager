/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Indexes;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Portfolioitem.PortfolioitemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioitemTag.PortfolioitemTagPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Taggroup.TaggroupPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tag extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.tag</code>
     */
    public static final Tag TAG = new Tag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>tlmt.tag.id</code>.
     */
    public final TableField<TagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('tlmt.hibernate_sequence'::regclass)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tlmt.tag.color</code>.
     */
    public final TableField<TagRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.tag.tag</code>.
     */
    public final TableField<TagRecord, String> TAG_ = createField(DSL.name("tag"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.tag.type</code>.
     */
    public final TableField<TagRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.tag.active</code>.
     */
    public final TableField<TagRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tlmt.tag.last_updated</code>.
     */
    public final TableField<TagRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.tag.created_at</code>.
     */
    public final TableField<TagRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tlmt.tag.taggroupid</code>.
     */
    public final TableField<TagRecord, Long> TAGGROUPID = createField(DSL.name("taggroupid"), SQLDataType.BIGINT, this, "");

    private Tag(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.tag</code> table reference
     */
    public Tag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>tlmt.tag</code> table reference
     */
    public Tag(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>tlmt.tag</code> table reference
     */
    public Tag() {
        this(DSL.name("tag"), null);
    }

    public <O extends Record> Tag(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
        super(path, childPath, parentPath, TAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TagPath extends Tag implements Path<TagRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TagPath(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TagPath(Name alias, Table<TagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TagPath as(String alias) {
            return new TagPath(DSL.name(alias), this);
        }

        @Override
        public TagPath as(Name alias) {
            return new TagPath(alias, this);
        }

        @Override
        public TagPath as(Table<?> alias) {
            return new TagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_TAG_TYPE);
    }

    @Override
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.TAG_PKEY;
    }

    @Override
    public List<UniqueKey<TagRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_TAG);
    }

    @Override
    public List<ForeignKey<TagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG__TAG_GROUP_ID_FK);
    }

    private transient TaggroupPath _taggroup;

    /**
     * Get the implicit join path to the <code>tlmt.taggroup</code> table.
     */
    public TaggroupPath taggroup() {
        if (_taggroup == null)
            _taggroup = new TaggroupPath(this, Keys.TAG__TAG_GROUP_ID_FK, null);

        return _taggroup;
    }

    private transient PortfolioitemTagPath _portfolioitemTag;

    /**
     * Get the implicit to-many join path to the
     * <code>tlmt.portfolioitem_tag</code> table
     */
    public PortfolioitemTagPath portfolioitemTag() {
        if (_portfolioitemTag == null)
            _portfolioitemTag = new PortfolioitemTagPath(this, null, Keys.PORTFOLIOITEM_TAG__FK_PORTFOLIOITEM_TAG_TAG.getInverseKey());

        return _portfolioitemTag;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>tlmt.portfolioitem</code> table
     */
    public PortfolioitemPath portfolioitem() {
        return portfolioitemTag().portfolioitem();
    }

    @Override
    public Tag as(String alias) {
        return new Tag(DSL.name(alias), this);
    }

    @Override
    public Tag as(Name alias) {
        return new Tag(alias, this);
    }

    @Override
    public Tag as(Table<?> alias) {
        return new Tag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(String name) {
        return new Tag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Name name) {
        return new Tag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Table<?> name) {
        return new Tag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition condition) {
        return new Tag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
