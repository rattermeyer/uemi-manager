/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioChangesExtendedRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioChangesExtended extends TableImpl<PortfolioChangesExtendedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolio_changes_extended</code>
     */
    public static final PortfolioChangesExtended PORTFOLIO_CHANGES_EXTENDED = new PortfolioChangesExtended();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioChangesExtendedRecord> getRecordType() {
        return PortfolioChangesExtendedRecord.class;
    }

    /**
     * The column <code>tlmt.portfolio_changes_extended.id</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.name</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.old_version</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, String> OLD_VERSION = createField(DSL.name("old_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.old_status</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, String> OLD_STATUS = createField(DSL.name("old_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.new_status</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, String> NEW_STATUS = createField(DSL.name("new_status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.new_version</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, String> NEW_VERSION = createField(DSL.name("new_version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.new_published</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, Boolean> NEW_PUBLISHED = createField(DSL.name("new_published"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.old_status_value</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, Integer> OLD_STATUS_VALUE = createField(DSL.name("old_status_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>tlmt.portfolio_changes_extended.rechts_status_value</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, Integer> RECHTS_STATUS_VALUE = createField(DSL.name("rechts_status_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolio_changes_extended.distance</code>.
     */
    public final TableField<PortfolioChangesExtendedRecord, Long> DISTANCE = createField(DSL.name("distance"), SQLDataType.BIGINT, this, "");

    private PortfolioChangesExtended(Name alias, Table<PortfolioChangesExtendedRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioChangesExtended(Name alias, Table<PortfolioChangesExtendedRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolio_changes_extended" as  WITH trindex AS (
                SELECT sub.id,
                   sub.published,
                   sub.published_timestamp,
                   sub.uuid,
                   sub.version,
                   row_number() OVER () AS index
                  FROM ( SELECT portfolio_version.id,
                           portfolio_version.published,
                           portfolio_version.published_timestamp,
                           portfolio_version.uuid,
                           portfolio_version.version
                          FROM tlmt.portfolio_version
                         ORDER BY portfolio_version.published_timestamp) sub
               )
        SELECT links.portfolioitem_id AS id,
           pi.name,
           trl.version AS old_version,
           links.new_status AS old_status,
           rechts.new_status,
           trr.version AS new_version,
           trr.published AS new_published,
               CASE
                   WHEN ((links.new_status)::text = 'NEW'::text) THEN 0
                   WHEN ((links.new_status)::text = 'END_OF_LIFE'::text) THEN 1
                   WHEN ((links.new_status)::text = 'NOT_IN_FOCUS'::text) THEN 2
                   WHEN ((links.new_status)::text = 'ASSESS'::text) THEN 3
                   WHEN ((links.new_status)::text = 'TRIAL'::text) THEN 4
                   WHEN ((links.new_status)::text = 'PORTFOLIO'::text) THEN 5
                   WHEN ((links.new_status)::text = 'ON_HOLD'::text) THEN 6
                   ELSE '-1'::integer
               END AS old_status_value,
               CASE
                   WHEN ((rechts.new_status)::text = 'NEW'::text) THEN 0
                   WHEN ((rechts.new_status)::text = 'END_OF_LIFE'::text) THEN 1
                   WHEN ((rechts.new_status)::text = 'NOT_IN_FOCUS'::text) THEN 2
                   WHEN ((rechts.new_status)::text = 'ASSESS'::text) THEN 3
                   WHEN ((rechts.new_status)::text = 'TRIAL'::text) THEN 4
                   WHEN ((rechts.new_status)::text = 'PORTFOLIO'::text) THEN 5
                   WHEN ((rechts.new_status)::text = 'ON_HOLD'::text) THEN 6
                   ELSE '-1'::integer
               END AS rechts_status_value,
           (( SELECT trindex.index
                  FROM trindex
                 WHERE ((trindex.version)::text = (trr.version)::text)) - ( SELECT trindex.index
                  FROM trindex
                 WHERE ((trindex.version)::text = (trl.version)::text))) AS distance
          FROM tlmt.portfolioitem_status_history links,
           tlmt.portfolioitem_status_history rechts,
           tlmt.portfolio_version trl,
           tlmt.portfolio_version trr,
           tlmt.portfolioitem pi
         WHERE (((links.portfolio_version)::text = (trl.version)::text) AND ((rechts.portfolio_version)::text = (trr.version)::text) AND (links.portfolioitem_id = rechts.portfolioitem_id) AND (links.portfolioitem_id = pi.id) AND (rechts.portfolioitem_id = pi.id) AND (pi.active = true) AND ((trl.published_timestamp <= trr.published_timestamp) OR (trr.published IS FALSE)));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_changes_extended</code> table
     * reference
     */
    public PortfolioChangesExtended(String alias) {
        this(DSL.name(alias), PORTFOLIO_CHANGES_EXTENDED);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_changes_extended</code> table
     * reference
     */
    public PortfolioChangesExtended(Name alias) {
        this(alias, PORTFOLIO_CHANGES_EXTENDED);
    }

    /**
     * Create a <code>tlmt.portfolio_changes_extended</code> table reference
     */
    public PortfolioChangesExtended() {
        this(DSL.name("portfolio_changes_extended"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioChangesExtended as(String alias) {
        return new PortfolioChangesExtended(DSL.name(alias), this);
    }

    @Override
    public PortfolioChangesExtended as(Name alias) {
        return new PortfolioChangesExtended(alias, this);
    }

    @Override
    public PortfolioChangesExtended as(Table<?> alias) {
        return new PortfolioChangesExtended(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChangesExtended rename(String name) {
        return new PortfolioChangesExtended(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChangesExtended rename(Name name) {
        return new PortfolioChangesExtended(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioChangesExtended rename(Table<?> name) {
        return new PortfolioChangesExtended(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended where(Condition condition) {
        return new PortfolioChangesExtended(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChangesExtended where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChangesExtended where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChangesExtended where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioChangesExtended where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioChangesExtended whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
