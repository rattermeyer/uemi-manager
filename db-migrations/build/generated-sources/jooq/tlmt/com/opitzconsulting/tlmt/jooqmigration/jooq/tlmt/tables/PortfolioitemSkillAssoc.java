/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.EManagedStatus;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemSkillAssocRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemSkillAssoc extends TableImpl<PortfolioitemSkillAssocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem_skill_assoc</code>
     */
    public static final PortfolioitemSkillAssoc PORTFOLIOITEM_SKILL_ASSOC = new PortfolioitemSkillAssoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemSkillAssocRecord> getRecordType() {
        return PortfolioitemSkillAssocRecord.class;
    }

    /**
     * The column
     * <code>tlmt.portfolioitem_skill_assoc.portfolioitem_uuid</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, UUID> PORTFOLIOITEM_UUID = createField(DSL.name("portfolioitem_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolioitem_skill_assoc.skill_uuid</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, UUID> SKILL_UUID = createField(DSL.name("skill_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolioitem_skill_assoc.status</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, EManagedStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(EManagedStatus.class), this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_skill_assoc.portfolioitem_name</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_skill_assoc.skill_key</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, String> SKILL_KEY = createField(DSL.name("skill_key"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>tlmt.portfolioitem_skill_assoc.id</code>.
     */
    public final TableField<PortfolioitemSkillAssocRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PortfolioitemSkillAssoc(Name alias, Table<PortfolioitemSkillAssocRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemSkillAssoc(Name alias, Table<PortfolioitemSkillAssocRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_skill_assoc</code> table
     * reference
     */
    public PortfolioitemSkillAssoc(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_SKILL_ASSOC);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_skill_assoc</code> table
     * reference
     */
    public PortfolioitemSkillAssoc(Name alias) {
        this(alias, PORTFOLIOITEM_SKILL_ASSOC);
    }

    /**
     * Create a <code>tlmt.portfolioitem_skill_assoc</code> table reference
     */
    public PortfolioitemSkillAssoc() {
        this(DSL.name("portfolioitem_skill_assoc"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemSkillAssoc as(String alias) {
        return new PortfolioitemSkillAssoc(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemSkillAssoc as(Name alias) {
        return new PortfolioitemSkillAssoc(alias, this);
    }

    @Override
    public PortfolioitemSkillAssoc as(Table<?> alias) {
        return new PortfolioitemSkillAssoc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemSkillAssoc rename(String name) {
        return new PortfolioitemSkillAssoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemSkillAssoc rename(Name name) {
        return new PortfolioitemSkillAssoc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemSkillAssoc rename(Table<?> name) {
        return new PortfolioitemSkillAssoc(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc where(Condition condition) {
        return new PortfolioitemSkillAssoc(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemSkillAssoc where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemSkillAssoc where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemSkillAssoc where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemSkillAssoc where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemSkillAssoc whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
