/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioItemQsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioItemQs extends TableImpl<PortfolioItemQsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolio_item_qs</code>
     */
    public static final PortfolioItemQs PORTFOLIO_ITEM_QS = new PortfolioItemQs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioItemQsRecord> getRecordType() {
        return PortfolioItemQsRecord.class;
    }

    /**
     * The column <code>tlmt.portfolio_item_qs.uuid</code>.
     */
    public final TableField<PortfolioItemQsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.id</code>.
     */
    public final TableField<PortfolioItemQsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.name</code>.
     */
    public final TableField<PortfolioItemQsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.tags</code>.
     */
    public final TableField<PortfolioItemQsRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.array(), this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.taggrouptitle</code>.
     */
    public final TableField<PortfolioItemQsRecord, String> TAGGROUPTITLE = createField(DSL.name("taggrouptitle"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.rule</code>.
     */
    public final TableField<PortfolioItemQsRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.tag_count</code>.
     */
    public final TableField<PortfolioItemQsRecord, Integer> TAG_COUNT = createField(DSL.name("tag_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolio_item_qs.rule_violated</code>.
     */
    public final TableField<PortfolioItemQsRecord, Boolean> RULE_VIOLATED = createField(DSL.name("rule_violated"), SQLDataType.BOOLEAN, this, "");

    private PortfolioItemQs(Name alias, Table<PortfolioItemQsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioItemQs(Name alias, Table<PortfolioItemQsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolio_item_qs" as  WITH rule_and_count AS (
                SELECT pi.uuid,
                   pi.id,
                   pi.name,
                   pi.tags,
                   tg.taggrouptitle,
                   tg.rule,
                   COALESCE(array_length(extensions.array_intersect(pi.tags, tg.tags), 1), 0) AS tag_count
                  FROM tlmt.portfolioitem pi,
                   tlmt.taggroup tg
               )
        SELECT uuid,
           id,
           name,
           tags,
           taggrouptitle,
           rule,
           tag_count,
               CASE
                   WHEN ((rule = 'NONE'::tlmt.tag_group_rule) AND (tag_count > 0)) THEN true
                   WHEN ((rule = 'EXACTLY_ONE'::tlmt.tag_group_rule) AND (tag_count <> 1)) THEN true
                   WHEN ((rule = 'AT_LEAST_ONE'::tlmt.tag_group_rule) AND (tag_count < 1)) THEN true
                   WHEN ((rule = 'AT_MOST_ONE'::tlmt.tag_group_rule) AND (tag_count > 1)) THEN true
                   ELSE false
               END AS rule_violated
          FROM rule_and_count;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_item_qs</code> table reference
     */
    public PortfolioItemQs(String alias) {
        this(DSL.name(alias), PORTFOLIO_ITEM_QS);
    }

    /**
     * Create an aliased <code>tlmt.portfolio_item_qs</code> table reference
     */
    public PortfolioItemQs(Name alias) {
        this(alias, PORTFOLIO_ITEM_QS);
    }

    /**
     * Create a <code>tlmt.portfolio_item_qs</code> table reference
     */
    public PortfolioItemQs() {
        this(DSL.name("portfolio_item_qs"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioItemQs as(String alias) {
        return new PortfolioItemQs(DSL.name(alias), this);
    }

    @Override
    public PortfolioItemQs as(Name alias) {
        return new PortfolioItemQs(alias, this);
    }

    @Override
    public PortfolioItemQs as(Table<?> alias) {
        return new PortfolioItemQs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItemQs rename(String name) {
        return new PortfolioItemQs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItemQs rename(Name name) {
        return new PortfolioItemQs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItemQs rename(Table<?> name) {
        return new PortfolioItemQs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs where(Condition condition) {
        return new PortfolioItemQs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItemQs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItemQs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItemQs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItemQs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItemQs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
