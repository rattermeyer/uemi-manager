/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemAssessmentViewRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemAssessmentView extends TableImpl<PortfolioitemAssessmentViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem_assessment_view</code>
     */
    public static final PortfolioitemAssessmentView PORTFOLIOITEM_ASSESSMENT_VIEW = new PortfolioitemAssessmentView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemAssessmentViewRecord> getRecordType() {
        return PortfolioitemAssessmentViewRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.uuid</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.id</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.radar_id</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, Long> RADAR_ID = createField(DSL.name("radar_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_view.portfolioitem_id</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_assessment_view.portfolioitem_name</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.joblevel</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, String> JOBLEVEL = createField(DSL.name("joblevel"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.stars</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, Integer> STARS = createField(DSL.name("stars"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tlmt.portfolioitem_assessment_view.value</code>.
     */
    public final TableField<PortfolioitemAssessmentViewRecord, Integer> VALUE = createField(DSL.name("value"), SQLDataType.INTEGER, this, "");

    private PortfolioitemAssessmentView(Name alias, Table<PortfolioitemAssessmentViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemAssessmentView(Name alias, Table<PortfolioitemAssessmentViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_assessment_view" as  SELECT pi.uuid,
         assessment_view.id,
         assessment_view.radar_id,
         assessment_view.portfolioitem_id,
         assessment_view.portfolioitem_name,
         assessment_view.joblevel,
         assessment_view.stars,
         assessment_view.value
        FROM (( SELECT portfolioitem_assessment.id,
                 portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 portfolioitem_assessment.joblevel,
                 1 AS stars,
                 portfolioitem_assessment.one_star AS value
                FROM tlmt.portfolioitem_assessment
             UNION
              SELECT portfolioitem_assessment.id,
                 portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 portfolioitem_assessment.joblevel,
                 2 AS stars,
                 portfolioitem_assessment.two_stars AS value
                FROM tlmt.portfolioitem_assessment
             UNION
              SELECT portfolioitem_assessment.id,
                 portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 portfolioitem_assessment.joblevel,
                 3 AS stars,
                 portfolioitem_assessment.three_stars AS value
                FROM tlmt.portfolioitem_assessment
             UNION
              SELECT portfolioitem_assessment.id,
                 portfolioitem_assessment.radar_id,
                 portfolioitem_assessment.portfolioitem_id,
                 portfolioitem_assessment.portfolioitem_name,
                 portfolioitem_assessment.joblevel,
                 4 AS stars,
                 portfolioitem_assessment.four_stars AS value
                FROM tlmt.portfolioitem_assessment) assessment_view
          JOIN tlmt.portfolioitem pi ON ((assessment_view.portfolioitem_id = pi.id)));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_view</code> table
     * reference
     */
    public PortfolioitemAssessmentView(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_ASSESSMENT_VIEW);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_assessment_view</code> table
     * reference
     */
    public PortfolioitemAssessmentView(Name alias) {
        this(alias, PORTFOLIOITEM_ASSESSMENT_VIEW);
    }

    /**
     * Create a <code>tlmt.portfolioitem_assessment_view</code> table reference
     */
    public PortfolioitemAssessmentView() {
        this(DSL.name("portfolioitem_assessment_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemAssessmentView as(String alias) {
        return new PortfolioitemAssessmentView(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemAssessmentView as(Name alias) {
        return new PortfolioitemAssessmentView(alias, this);
    }

    @Override
    public PortfolioitemAssessmentView as(Table<?> alias) {
        return new PortfolioitemAssessmentView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentView rename(String name) {
        return new PortfolioitemAssessmentView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentView rename(Name name) {
        return new PortfolioitemAssessmentView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemAssessmentView rename(Table<?> name) {
        return new PortfolioitemAssessmentView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView where(Condition condition) {
        return new PortfolioitemAssessmentView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemAssessmentView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemAssessmentView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
