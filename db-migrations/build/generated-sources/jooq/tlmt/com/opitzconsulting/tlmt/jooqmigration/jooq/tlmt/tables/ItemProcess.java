/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Item.ItemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.ItemProcessChange.ItemProcessChangePath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemProcessRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ItemProcess extends TableImpl<ItemProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.item_process</code>
     */
    public static final ItemProcess ITEM_PROCESS = new ItemProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemProcessRecord> getRecordType() {
        return ItemProcessRecord.class;
    }

    /**
     * The column <code>tlmt.item_process.id</code>.
     */
    public final TableField<ItemProcessRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.item_process.item_id</code>.
     */
    public final TableField<ItemProcessRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tlmt.item_process.email_notification</code>.
     */
    public final TableField<ItemProcessRecord, String> EMAIL_NOTIFICATION = createField(DSL.name("email_notification"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>tlmt.item_process.created_at</code>.
     */
    public final TableField<ItemProcessRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("statement_timestamp()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>tlmt.item_process.last_updated</code>.
     */
    public final TableField<ItemProcessRecord, OffsetDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>tlmt.item_process.updated_by</code>.
     */
    public final TableField<ItemProcessRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.item_process.uuid</code>.
     */
    public final TableField<ItemProcessRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    private ItemProcess(Name alias, Table<ItemProcessRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ItemProcess(Name alias, Table<ItemProcessRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.item_process</code> table reference
     */
    public ItemProcess(String alias) {
        this(DSL.name(alias), ITEM_PROCESS);
    }

    /**
     * Create an aliased <code>tlmt.item_process</code> table reference
     */
    public ItemProcess(Name alias) {
        this(alias, ITEM_PROCESS);
    }

    /**
     * Create a <code>tlmt.item_process</code> table reference
     */
    public ItemProcess() {
        this(DSL.name("item_process"), null);
    }

    public <O extends Record> ItemProcess(Table<O> path, ForeignKey<O, ItemProcessRecord> childPath, InverseForeignKey<O, ItemProcessRecord> parentPath) {
        super(path, childPath, parentPath, ITEM_PROCESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ItemProcessPath extends ItemProcess implements Path<ItemProcessRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ItemProcessPath(Table<O> path, ForeignKey<O, ItemProcessRecord> childPath, InverseForeignKey<O, ItemProcessRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ItemProcessPath(Name alias, Table<ItemProcessRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ItemProcessPath as(String alias) {
            return new ItemProcessPath(DSL.name(alias), this);
        }

        @Override
        public ItemProcessPath as(Name alias) {
            return new ItemProcessPath(alias, this);
        }

        @Override
        public ItemProcessPath as(Table<?> alias) {
            return new ItemProcessPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public UniqueKey<ItemProcessRecord> getPrimaryKey() {
        return Keys.ITEM_PROCESS_PKEY;
    }

    @Override
    public List<UniqueKey<ItemProcessRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ITEM_PROCESS_UUID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ItemProcessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEM_PROCESS__ITEM_PROCESS_ITEM_ID_FKEY);
    }

    private transient ItemPath _item;

    /**
     * Get the implicit join path to the <code>tlmt.item</code> table.
     */
    public ItemPath item() {
        if (_item == null)
            _item = new ItemPath(this, Keys.ITEM_PROCESS__ITEM_PROCESS_ITEM_ID_FKEY, null);

        return _item;
    }

    private transient ItemProcessChangePath _itemProcessChange;

    /**
     * Get the implicit to-many join path to the
     * <code>tlmt.item_process_change</code> table
     */
    public ItemProcessChangePath itemProcessChange() {
        if (_itemProcessChange == null)
            _itemProcessChange = new ItemProcessChangePath(this, null, Keys.ITEM_PROCESS_CHANGE__ITEM_PROCESS_CHANGE_PROCESS_ID_FKEY.getInverseKey());

        return _itemProcessChange;
    }

    @Override
    public ItemProcess as(String alias) {
        return new ItemProcess(DSL.name(alias), this);
    }

    @Override
    public ItemProcess as(Name alias) {
        return new ItemProcess(alias, this);
    }

    @Override
    public ItemProcess as(Table<?> alias) {
        return new ItemProcess(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemProcess rename(String name) {
        return new ItemProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemProcess rename(Name name) {
        return new ItemProcess(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemProcess rename(Table<?> name) {
        return new ItemProcess(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess where(Condition condition) {
        return new ItemProcess(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemProcess where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemProcess where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemProcess where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemProcess where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemProcess whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
