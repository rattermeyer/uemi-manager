/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemCountByStatusRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemCountByStatus extends TableImpl<PortfolioitemCountByStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem_count_by_status</code>
     */
    public static final PortfolioitemCountByStatus PORTFOLIOITEM_COUNT_BY_STATUS = new PortfolioitemCountByStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemCountByStatusRecord> getRecordType() {
        return PortfolioitemCountByStatusRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.version</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.new</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> NEW = createField(DSL.name("new"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.assess</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> ASSESS = createField(DSL.name("assess"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.trial</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> TRIAL = createField(DSL.name("trial"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.portfolio</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> PORTFOLIO = createField(DSL.name("portfolio"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.end_of_life</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> END_OF_LIFE = createField(DSL.name("end_of_life"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.on_hold</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> ON_HOLD = createField(DSL.name("on_hold"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_count_by_status.not_in_focus</code>.
     */
    public final TableField<PortfolioitemCountByStatusRecord, Long> NOT_IN_FOCUS = createField(DSL.name("not_in_focus"), SQLDataType.BIGINT, this, "");

    private PortfolioitemCountByStatus(Name alias, Table<PortfolioitemCountByStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemCountByStatus(Name alias, Table<PortfolioitemCountByStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_count_by_status" as  SELECT version,
          max(count) FILTER (WHERE ((status)::text = 'NEW'::text)) AS new,
          max(count) FILTER (WHERE ((status)::text = 'ASSESS'::text)) AS assess,
          max(count) FILTER (WHERE ((status)::text = 'TRIAL'::text)) AS trial,
          max(count) FILTER (WHERE ((status)::text = 'PORTFOLIO'::text)) AS portfolio,
          max(count) FILTER (WHERE ((status)::text = 'END_OF_LIFE'::text)) AS end_of_life,
          max(count) FILTER (WHERE ((status)::text = 'ON_HOLD'::text)) AS on_hold,
          max(count) FILTER (WHERE ((status)::text = 'NOT_IN_FOCUS'::text)) AS not_in_focus
         FROM ( SELECT portfolioitem_status_history.portfolio_version AS version,
                  portfolioitem_status_history.new_status AS status,
                  count(*) AS count
                 FROM tlmt.portfolioitem_status_history
                GROUP BY portfolioitem_status_history.portfolio_version, portfolioitem_status_history.new_status) vsc
        WHERE (version IS NOT NULL)
        GROUP BY version
        ORDER BY version;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_count_by_status</code> table
     * reference
     */
    public PortfolioitemCountByStatus(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_COUNT_BY_STATUS);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_count_by_status</code> table
     * reference
     */
    public PortfolioitemCountByStatus(Name alias) {
        this(alias, PORTFOLIOITEM_COUNT_BY_STATUS);
    }

    /**
     * Create a <code>tlmt.portfolioitem_count_by_status</code> table reference
     */
    public PortfolioitemCountByStatus() {
        this(DSL.name("portfolioitem_count_by_status"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemCountByStatus as(String alias) {
        return new PortfolioitemCountByStatus(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemCountByStatus as(Name alias) {
        return new PortfolioitemCountByStatus(alias, this);
    }

    @Override
    public PortfolioitemCountByStatus as(Table<?> alias) {
        return new PortfolioitemCountByStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemCountByStatus rename(String name) {
        return new PortfolioitemCountByStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemCountByStatus rename(Name name) {
        return new PortfolioitemCountByStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemCountByStatus rename(Table<?> name) {
        return new PortfolioitemCountByStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus where(Condition condition) {
        return new PortfolioitemCountByStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemCountByStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemCountByStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemCountByStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemCountByStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemCountByStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
