/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TagGroupOverviewRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.ItemSummary;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.udt.records.ItemSummaryRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TagGroupOverview extends TableImpl<TagGroupOverviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.tag_group_overview</code>
     */
    public static final TagGroupOverview TAG_GROUP_OVERVIEW = new TagGroupOverview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagGroupOverviewRecord> getRecordType() {
        return TagGroupOverviewRecord.class;
    }

    /**
     * The column <code>tlmt.tag_group_overview.taggrouptitle</code>.
     */
    public final TableField<TagGroupOverviewRecord, String> TAGGROUPTITLE = createField(DSL.name("taggrouptitle"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.tag_group_overview.rule</code>.
     */
    public final TableField<TagGroupOverviewRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>tlmt.tag_group_overview.tag_group_uuid</code>.
     */
    public final TableField<TagGroupOverviewRecord, UUID> TAG_GROUP_UUID = createField(DSL.name("tag_group_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.tag_group_overview.backgroundcolor</code>.
     */
    public final TableField<TagGroupOverviewRecord, String> BACKGROUNDCOLOR = createField(DSL.name("backgroundcolor"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.tag_group_overview.items_raw</code>.
     */
    public final TableField<TagGroupOverviewRecord, ItemSummaryRecord[]> ITEMS_RAW = createField(DSL.name("items_raw"), ItemSummary.ITEM_SUMMARY.getDataType().array(), this, "");

    /**
     * The column <code>tlmt.tag_group_overview.items</code>.
     */
    public final TableField<TagGroupOverviewRecord, JSON> ITEMS = createField(DSL.name("items"), SQLDataType.JSON, this, "");

    /**
     * The column <code>tlmt.tag_group_overview.number_of_items</code>.
     */
    public final TableField<TagGroupOverviewRecord, Integer> NUMBER_OF_ITEMS = createField(DSL.name("number_of_items"), SQLDataType.INTEGER, this, "");

    private TagGroupOverview(Name alias, Table<TagGroupOverviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TagGroupOverview(Name alias, Table<TagGroupOverviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "tag_group_overview" as  SELECT taggrouptitle,
         rule,
         uuid AS tag_group_uuid,
         backgroundcolor,
         items AS items_raw,
         COALESCE(array_to_json(items), json_build_array()) AS items,
         COALESCE(array_length(items, 1), 0) AS number_of_items
        FROM ( SELECT tg.id,
                 tg.taggrouptitle,
                 tg.backgroundcolor,
                 tg.rule,
                 tg.last_updated,
                 tg.created_at,
                 tg.tags,
                 tg.uuid,
                 ( SELECT array_agg(ROW((pi.name)::text, pi.uuid)::tlmt.item_summary) AS array_agg
                        FROM tlmt.portfolioitem pi
                       WHERE ((tg.tags && pi.tags) AND (pi.active = true))) AS items
                FROM tlmt.taggroup tg) "grouping";
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.tag_group_overview</code> table reference
     */
    public TagGroupOverview(String alias) {
        this(DSL.name(alias), TAG_GROUP_OVERVIEW);
    }

    /**
     * Create an aliased <code>tlmt.tag_group_overview</code> table reference
     */
    public TagGroupOverview(Name alias) {
        this(alias, TAG_GROUP_OVERVIEW);
    }

    /**
     * Create a <code>tlmt.tag_group_overview</code> table reference
     */
    public TagGroupOverview() {
        this(DSL.name("tag_group_overview"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public TagGroupOverview as(String alias) {
        return new TagGroupOverview(DSL.name(alias), this);
    }

    @Override
    public TagGroupOverview as(Name alias) {
        return new TagGroupOverview(alias, this);
    }

    @Override
    public TagGroupOverview as(Table<?> alias) {
        return new TagGroupOverview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroupOverview rename(String name) {
        return new TagGroupOverview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroupOverview rename(Name name) {
        return new TagGroupOverview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroupOverview rename(Table<?> name) {
        return new TagGroupOverview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview where(Condition condition) {
        return new TagGroupOverview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroupOverview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroupOverview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroupOverview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroupOverview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroupOverview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
