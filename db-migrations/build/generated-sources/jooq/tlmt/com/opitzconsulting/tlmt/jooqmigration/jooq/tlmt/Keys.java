/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.FlywaySchemaHistory;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Item;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.ItemLink;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.ItemProcess;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.ItemProcessChange;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Mergehistory;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Outbox;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioVersion;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Portfolioitem;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioitemAssessment;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.PortfolioitemTag;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Skill;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.SkillDistribution;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Statuschange;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Tag;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.Taggroup;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.FlywaySchemaHistoryRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemLinkRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemProcessChangeRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemProcessRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.ItemRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.MergehistoryRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.OutboxRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioVersionRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemAssessmentRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemTagRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.SkillDistributionRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.SkillRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.StatuschangeRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TagRecord;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.TaggroupRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * tlmt.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<ItemRecord> ITEM_NAME_UNIQUE = Internal.createUniqueKey(Item.ITEM, DSL.name("item_name_unique"), new TableField[] { Item.ITEM.NAME }, true);
    public static final UniqueKey<ItemRecord> ITEM_PKEY = Internal.createUniqueKey(Item.ITEM, DSL.name("item_pkey"), new TableField[] { Item.ITEM.ID }, true);
    public static final UniqueKey<ItemRecord> ITEM_UUID_UNIQUE = Internal.createUniqueKey(Item.ITEM, DSL.name("item_uuid_unique"), new TableField[] { Item.ITEM.UUID }, true);
    public static final UniqueKey<ItemLinkRecord> PK_ITEM_LINK = Internal.createUniqueKey(ItemLink.ITEM_LINK, DSL.name("pk_item_link"), new TableField[] { ItemLink.ITEM_LINK.PORTFOLIOITEM_ID, ItemLink.ITEM_LINK.NAME, ItemLink.ITEM_LINK.URL }, true);
    public static final UniqueKey<ItemProcessRecord> ITEM_PROCESS_PKEY = Internal.createUniqueKey(ItemProcess.ITEM_PROCESS, DSL.name("item_process_pkey"), new TableField[] { ItemProcess.ITEM_PROCESS.ID }, true);
    public static final UniqueKey<ItemProcessRecord> ITEM_PROCESS_UUID_UNIQUE = Internal.createUniqueKey(ItemProcess.ITEM_PROCESS, DSL.name("item_process_uuid_unique"), new TableField[] { ItemProcess.ITEM_PROCESS.UUID }, true);
    public static final UniqueKey<ItemProcessChangeRecord> ITEM_PROCESS_CHANGE_PKEY = Internal.createUniqueKey(ItemProcessChange.ITEM_PROCESS_CHANGE, DSL.name("item_process_change_pkey"), new TableField[] { ItemProcessChange.ITEM_PROCESS_CHANGE.ID }, true);
    public static final UniqueKey<MergehistoryRecord> MERGEHISTORY_PKEY = Internal.createUniqueKey(Mergehistory.MERGEHISTORY, DSL.name("mergehistory_pkey"), new TableField[] { Mergehistory.MERGEHISTORY.ID }, true);
    public static final UniqueKey<OutboxRecord> OUTBOX_PKEY = Internal.createUniqueKey(Outbox.OUTBOX, DSL.name("outbox_pkey"), new TableField[] { Outbox.OUTBOX.EVENT_UUID }, true);
    public static final UniqueKey<PortfolioVersionRecord> RADAR_VERSION_UNIQUE = Internal.createUniqueKey(PortfolioVersion.PORTFOLIO_VERSION, DSL.name("radar_version_unique"), new TableField[] { PortfolioVersion.PORTFOLIO_VERSION.VERSION }, true);
    public static final UniqueKey<PortfolioVersionRecord> TECHRADAR_PKEY = Internal.createUniqueKey(PortfolioVersion.PORTFOLIO_VERSION, DSL.name("techradar_pkey"), new TableField[] { PortfolioVersion.PORTFOLIO_VERSION.ID }, true);
    public static final UniqueKey<PortfolioVersionRecord> UQ_UUID = Internal.createUniqueKey(PortfolioVersion.PORTFOLIO_VERSION, DSL.name("uq_uuid"), new TableField[] { PortfolioVersion.PORTFOLIO_VERSION.UUID }, true);
    public static final UniqueKey<PortfolioitemRecord> PORTFOLIOITEM_PKEY = Internal.createUniqueKey(Portfolioitem.PORTFOLIOITEM, DSL.name("portfolioitem_pkey"), new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final UniqueKey<PortfolioitemRecord> UQ_PORTFOLIOITEM = Internal.createUniqueKey(Portfolioitem.PORTFOLIOITEM, DSL.name("uq_portfolioitem"), new TableField[] { Portfolioitem.PORTFOLIOITEM.NAME }, true);
    public static final UniqueKey<PortfolioitemRecord> UQ_PORTFOLIOITEM_UUID = Internal.createUniqueKey(Portfolioitem.PORTFOLIOITEM, DSL.name("uq_portfolioitem_uuid"), new TableField[] { Portfolioitem.PORTFOLIOITEM.UUID }, true);
    public static final UniqueKey<PortfolioitemAssessmentRecord> PORTFOLIOITEM_ASSESSMENT_PKEY = Internal.createUniqueKey(PortfolioitemAssessment.PORTFOLIOITEM_ASSESSMENT, DSL.name("portfolioitem_assessment_pkey"), new TableField[] { PortfolioitemAssessment.PORTFOLIOITEM_ASSESSMENT.ID }, true);
    public static final UniqueKey<PortfolioitemTagRecord> PORTFOLIOITEM_TAG_PKEY = Internal.createUniqueKey(PortfolioitemTag.PORTFOLIOITEM_TAG, DSL.name("portfolioitem_tag_pkey"), new TableField[] { PortfolioitemTag.PORTFOLIOITEM_TAG.PORTFOLIOITEM_ID, PortfolioitemTag.PORTFOLIOITEM_TAG.TAG_ID }, true);
    public static final UniqueKey<SkillRecord> SKILL_PKEY = Internal.createUniqueKey(Skill.SKILL, DSL.name("skill_pkey"), new TableField[] { Skill.SKILL.ID }, true);
    public static final UniqueKey<SkillRecord> UQ_SKILL_UUID = Internal.createUniqueKey(Skill.SKILL, DSL.name("uq_skill_uuid"), new TableField[] { Skill.SKILL.UUID }, true);
    public static final UniqueKey<SkillDistributionRecord> SKILL_ASSESSMENT_PKEY = Internal.createUniqueKey(SkillDistribution.SKILL_DISTRIBUTION, DSL.name("skill_assessment_pkey"), new TableField[] { SkillDistribution.SKILL_DISTRIBUTION.ID }, true);
    public static final UniqueKey<StatuschangeRecord> STATUSCHANGE_PKEY = Internal.createUniqueKey(Statuschange.STATUSCHANGE, DSL.name("statuschange_pkey"), new TableField[] { Statuschange.STATUSCHANGE.ID }, true);
    public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(Tag.TAG, DSL.name("tag_pkey"), new TableField[] { Tag.TAG.ID }, true);
    public static final UniqueKey<TagRecord> UQ_TAG = Internal.createUniqueKey(Tag.TAG, DSL.name("uq_tag"), new TableField[] { Tag.TAG.TAG_ }, true);
    public static final UniqueKey<TaggroupRecord> TAGGROUP_PKEY = Internal.createUniqueKey(Taggroup.TAGGROUP, DSL.name("taggroup_pkey"), new TableField[] { Taggroup.TAGGROUP.ID }, true);
    public static final UniqueKey<TaggroupRecord> UQ_TAGGROUPTITLE = Internal.createUniqueKey(Taggroup.TAGGROUP, DSL.name("uq_taggrouptitle"), new TableField[] { Taggroup.TAGGROUP.TAGGROUPTITLE }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ItemLinkRecord, PortfolioitemRecord> ITEM_LINK__ITEM_LINK_PORTFOLIOITEM_ID_FKEY = Internal.createForeignKey(ItemLink.ITEM_LINK, DSL.name("item_link_portfolioitem_id_fkey"), new TableField[] { ItemLink.ITEM_LINK.PORTFOLIOITEM_ID }, Keys.PORTFOLIOITEM_PKEY, new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final ForeignKey<ItemProcessRecord, ItemRecord> ITEM_PROCESS__ITEM_PROCESS_ITEM_ID_FKEY = Internal.createForeignKey(ItemProcess.ITEM_PROCESS, DSL.name("item_process_item_id_fkey"), new TableField[] { ItemProcess.ITEM_PROCESS.ITEM_ID }, Keys.ITEM_PKEY, new TableField[] { Item.ITEM.ID }, true);
    public static final ForeignKey<ItemProcessChangeRecord, ItemProcessRecord> ITEM_PROCESS_CHANGE__ITEM_PROCESS_CHANGE_PROCESS_ID_FKEY = Internal.createForeignKey(ItemProcessChange.ITEM_PROCESS_CHANGE, DSL.name("item_process_change_process_id_fkey"), new TableField[] { ItemProcessChange.ITEM_PROCESS_CHANGE.PROCESS_ID }, Keys.ITEM_PROCESS_PKEY, new TableField[] { ItemProcess.ITEM_PROCESS.ID }, true);
    public static final ForeignKey<MergehistoryRecord, PortfolioitemRecord> MERGEHISTORY__FK_MERGEHISTORY_FROM = Internal.createForeignKey(Mergehistory.MERGEHISTORY, DSL.name("fk_mergehistory_from"), new TableField[] { Mergehistory.MERGEHISTORY.FROM_ID }, Keys.PORTFOLIOITEM_PKEY, new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final ForeignKey<MergehistoryRecord, PortfolioitemRecord> MERGEHISTORY__FK_MERGEHISTORY_TO = Internal.createForeignKey(Mergehistory.MERGEHISTORY, DSL.name("fk_mergehistory_to"), new TableField[] { Mergehistory.MERGEHISTORY.TO_ID }, Keys.PORTFOLIOITEM_PKEY, new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final ForeignKey<PortfolioitemTagRecord, PortfolioitemRecord> PORTFOLIOITEM_TAG__FK_PORTFOLIOITEM_TAG_PORTFOLIOITEM_TAG = Internal.createForeignKey(PortfolioitemTag.PORTFOLIOITEM_TAG, DSL.name("fk_portfolioitem_tag_portfolioitem_tag"), new TableField[] { PortfolioitemTag.PORTFOLIOITEM_TAG.PORTFOLIOITEM_ID }, Keys.PORTFOLIOITEM_PKEY, new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final ForeignKey<PortfolioitemTagRecord, TagRecord> PORTFOLIOITEM_TAG__FK_PORTFOLIOITEM_TAG_TAG = Internal.createForeignKey(PortfolioitemTag.PORTFOLIOITEM_TAG, DSL.name("fk_portfolioitem_tag_tag"), new TableField[] { PortfolioitemTag.PORTFOLIOITEM_TAG.TAG_ID }, Keys.TAG_PKEY, new TableField[] { Tag.TAG.ID }, true);
    public static final ForeignKey<SkillDistributionRecord, SkillRecord> SKILL_DISTRIBUTION__SKILL_DISTRIBUTION_SKILL_ID_FKEY = Internal.createForeignKey(SkillDistribution.SKILL_DISTRIBUTION, DSL.name("skill_distribution_skill_id_fkey"), new TableField[] { SkillDistribution.SKILL_DISTRIBUTION.SKILL_ID }, Keys.SKILL_PKEY, new TableField[] { Skill.SKILL.ID }, true);
    public static final ForeignKey<StatuschangeRecord, PortfolioitemRecord> STATUSCHANGE__FK_STATUSCHANGE = Internal.createForeignKey(Statuschange.STATUSCHANGE, DSL.name("fk_statuschange"), new TableField[] { Statuschange.STATUSCHANGE.PORTFOLIOITEM_ID }, Keys.PORTFOLIOITEM_PKEY, new TableField[] { Portfolioitem.PORTFOLIOITEM.ID }, true);
    public static final ForeignKey<StatuschangeRecord, PortfolioVersionRecord> STATUSCHANGE__STATUSCHANGE_TECHRADAR_UUID_FKEY = Internal.createForeignKey(Statuschange.STATUSCHANGE, DSL.name("statuschange_techradar_uuid_fkey"), new TableField[] { Statuschange.STATUSCHANGE.PORTFOLIO_VERSION_UUID }, Keys.UQ_UUID, new TableField[] { PortfolioVersion.PORTFOLIO_VERSION.UUID }, true);
    public static final ForeignKey<TagRecord, TaggroupRecord> TAG__TAG_GROUP_ID_FK = Internal.createForeignKey(Tag.TAG, DSL.name("tag_group_id_fk"), new TableField[] { Tag.TAG.TAGGROUPID }, Keys.TAGGROUP_PKEY, new TableField[] { Taggroup.TAGGROUP.ID }, true);
}
