/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemTotalsPerJoblevelRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemTotalsPerJoblevel extends TableImpl<PortfolioitemTotalsPerJoblevelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>tlmt.portfolioitem_totals_per_joblevel</code>
     */
    public static final PortfolioitemTotalsPerJoblevel PORTFOLIOITEM_TOTALS_PER_JOBLEVEL = new PortfolioitemTotalsPerJoblevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemTotalsPerJoblevelRecord> getRecordType() {
        return PortfolioitemTotalsPerJoblevelRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_totals_per_joblevel.radar_id</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, Long> RADAR_ID = createField(DSL.name("radar_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.portfolioitem_id</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, Long> PORTFOLIOITEM_ID = createField(DSL.name("portfolioitem_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.portfolioitem_name</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, String> PORTFOLIOITEM_NAME = createField(DSL.name("portfolioitem_name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_totals_per_joblevel.total_all</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_ALL = createField(DSL.name("total_all"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_associate</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_ASSOCIATE = createField(DSL.name("total_associate"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_enterprise</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_ENTERPRISE = createField(DSL.name("total_enterprise"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_lead</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_LEAD = createField(DSL.name("total_lead"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_professional</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_PROFESSIONAL = createField(DSL.name("total_professional"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_senior</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_SENIOR = createField(DSL.name("total_senior"), SQLDataType.NUMERIC, this, "");

    /**
     * The column
     * <code>tlmt.portfolioitem_totals_per_joblevel.total_sonstige</code>.
     */
    public final TableField<PortfolioitemTotalsPerJoblevelRecord, BigDecimal> TOTAL_SONSTIGE = createField(DSL.name("total_sonstige"), SQLDataType.NUMERIC, this, "");

    private PortfolioitemTotalsPerJoblevel(Name alias, Table<PortfolioitemTotalsPerJoblevelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemTotalsPerJoblevel(Name alias, Table<PortfolioitemTotalsPerJoblevelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_totals_per_joblevel" as  SELECT radar_id,
          portfolioitem_id,
          portfolioitem_name,
          sum("ALL") AS total_all,
          sum(associate) AS total_associate,
          sum(enterprise) AS total_enterprise,
          sum(lead) AS total_lead,
          sum(professional) AS total_professional,
          sum(senior) AS total_senior,
          sum(sonstige) AS total_sonstige
         FROM tlmt.portfolioitem_assessment_transposed
        GROUP BY radar_id, portfolioitem_id, portfolioitem_name;
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_totals_per_joblevel</code>
     * table reference
     */
    public PortfolioitemTotalsPerJoblevel(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_TOTALS_PER_JOBLEVEL);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_totals_per_joblevel</code>
     * table reference
     */
    public PortfolioitemTotalsPerJoblevel(Name alias) {
        this(alias, PORTFOLIOITEM_TOTALS_PER_JOBLEVEL);
    }

    /**
     * Create a <code>tlmt.portfolioitem_totals_per_joblevel</code> table
     * reference
     */
    public PortfolioitemTotalsPerJoblevel() {
        this(DSL.name("portfolioitem_totals_per_joblevel"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemTotalsPerJoblevel as(String alias) {
        return new PortfolioitemTotalsPerJoblevel(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemTotalsPerJoblevel as(Name alias) {
        return new PortfolioitemTotalsPerJoblevel(alias, this);
    }

    @Override
    public PortfolioitemTotalsPerJoblevel as(Table<?> alias) {
        return new PortfolioitemTotalsPerJoblevel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel rename(String name) {
        return new PortfolioitemTotalsPerJoblevel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel rename(Name name) {
        return new PortfolioitemTotalsPerJoblevel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel rename(Table<?> name) {
        return new PortfolioitemTotalsPerJoblevel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel where(Condition condition) {
        return new PortfolioitemTotalsPerJoblevel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemTotalsPerJoblevel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemTotalsPerJoblevel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemTotalsPerJoblevel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemTotalsPerJoblevel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemTotalsPerJoblevel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
