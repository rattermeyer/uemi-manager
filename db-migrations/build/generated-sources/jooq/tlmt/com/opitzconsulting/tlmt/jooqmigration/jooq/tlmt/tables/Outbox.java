/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.OutboxRecord;

import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Outbox extends TableImpl<OutboxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.outbox</code>
     */
    public static final Outbox OUTBOX = new Outbox();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutboxRecord> getRecordType() {
        return OutboxRecord.class;
    }

    /**
     * The column <code>tlmt.outbox.event_uuid</code>.
     */
    public final TableField<OutboxRecord, UUID> EVENT_UUID = createField(DSL.name("event_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>tlmt.outbox.item_uuid</code>.
     */
    public final TableField<OutboxRecord, UUID> ITEM_UUID = createField(DSL.name("item_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>tlmt.outbox.created_at</code>.
     */
    public final TableField<OutboxRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>tlmt.outbox.published_at</code>.
     */
    public final TableField<OutboxRecord, OffsetDateTime> PUBLISHED_AT = createField(DSL.name("published_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>tlmt.outbox.event</code>.
     */
    public final TableField<OutboxRecord, JSONB> EVENT = createField(DSL.name("event"), SQLDataType.JSONB.nullable(false), this, "");

    private Outbox(Name alias, Table<OutboxRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Outbox(Name alias, Table<OutboxRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tlmt.outbox</code> table reference
     */
    public Outbox(String alias) {
        this(DSL.name(alias), OUTBOX);
    }

    /**
     * Create an aliased <code>tlmt.outbox</code> table reference
     */
    public Outbox(Name alias) {
        this(alias, OUTBOX);
    }

    /**
     * Create a <code>tlmt.outbox</code> table reference
     */
    public Outbox() {
        this(DSL.name("outbox"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public UniqueKey<OutboxRecord> getPrimaryKey() {
        return Keys.OUTBOX_PKEY;
    }

    @Override
    public Outbox as(String alias) {
        return new Outbox(DSL.name(alias), this);
    }

    @Override
    public Outbox as(Name alias) {
        return new Outbox(alias, this);
    }

    @Override
    public Outbox as(Table<?> alias) {
        return new Outbox(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbox rename(String name) {
        return new Outbox(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbox rename(Name name) {
        return new Outbox(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outbox rename(Table<?> name) {
        return new Outbox(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox where(Condition condition) {
        return new Outbox(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbox where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbox where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbox where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Outbox where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Outbox whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
