/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.Tlmt;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.tlmt.tables.records.PortfolioitemQsWithTagsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioitemQsWithTags extends TableImpl<PortfolioitemQsWithTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tlmt.portfolioitem_qs_with_tags</code>
     */
    public static final PortfolioitemQsWithTags PORTFOLIOITEM_QS_WITH_TAGS = new PortfolioitemQsWithTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioitemQsWithTagsRecord> getRecordType() {
        return PortfolioitemQsWithTagsRecord.class;
    }

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.uuid</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.id</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.name</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.taggrouptitle</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, String> TAGGROUPTITLE = createField(DSL.name("taggrouptitle"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.rule</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.tag_count</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, Long> TAG_COUNT = createField(DSL.name("tag_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.rule_violated</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, Boolean> RULE_VIOLATED = createField(DSL.name("rule_violated"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.tags</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, String[]> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.array(), this, "");

    /**
     * The column <code>tlmt.portfolioitem_qs_with_tags.backgroundcolor</code>.
     */
    public final TableField<PortfolioitemQsWithTagsRecord, String> BACKGROUNDCOLOR = createField(DSL.name("backgroundcolor"), SQLDataType.VARCHAR(255), this, "");

    private PortfolioitemQsWithTags(Name alias, Table<PortfolioitemQsWithTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioitemQsWithTags(Name alias, Table<PortfolioitemQsWithTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "portfolioitem_qs_with_tags" as  SELECT pqs.uuid,
         pqs.id,
         pqs.name,
         pqs.taggrouptitle,
         pqs.rule,
         pqs.tag_count,
         pqs.rule_violated,
         tg.tags,
         tg.backgroundcolor
        FROM (tlmt.portfolioitem_qs pqs
          LEFT JOIN tlmt.taggroup tg ON (((pqs.taggrouptitle)::text = (tg.taggrouptitle)::text)));
        """), where);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_qs_with_tags</code> table
     * reference
     */
    public PortfolioitemQsWithTags(String alias) {
        this(DSL.name(alias), PORTFOLIOITEM_QS_WITH_TAGS);
    }

    /**
     * Create an aliased <code>tlmt.portfolioitem_qs_with_tags</code> table
     * reference
     */
    public PortfolioitemQsWithTags(Name alias) {
        this(alias, PORTFOLIOITEM_QS_WITH_TAGS);
    }

    /**
     * Create a <code>tlmt.portfolioitem_qs_with_tags</code> table reference
     */
    public PortfolioitemQsWithTags() {
        this(DSL.name("portfolioitem_qs_with_tags"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tlmt.TLMT;
    }

    @Override
    public PortfolioitemQsWithTags as(String alias) {
        return new PortfolioitemQsWithTags(DSL.name(alias), this);
    }

    @Override
    public PortfolioitemQsWithTags as(Name alias) {
        return new PortfolioitemQsWithTags(alias, this);
    }

    @Override
    public PortfolioitemQsWithTags as(Table<?> alias) {
        return new PortfolioitemQsWithTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemQsWithTags rename(String name) {
        return new PortfolioitemQsWithTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemQsWithTags rename(Name name) {
        return new PortfolioitemQsWithTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioitemQsWithTags rename(Table<?> name) {
        return new PortfolioitemQsWithTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags where(Condition condition) {
        return new PortfolioitemQsWithTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemQsWithTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemQsWithTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemQsWithTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioitemQsWithTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioitemQsWithTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
