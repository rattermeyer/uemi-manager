/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.Susy;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.enums.ItemType;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables.ReviewProcess.ReviewProcessPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables.records.ProposalRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Proposal extends TableImpl<ProposalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>susy.proposal</code>
     */
    public static final Proposal PROPOSAL = new Proposal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProposalRecord> getRecordType() {
        return ProposalRecord.class;
    }

    /**
     * The column <code>susy.proposal.uuid</code>.
     */
    public final TableField<ProposalRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>susy.proposal.name</code>.
     */
    public final TableField<ProposalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>susy.proposal.item_type</code>.
     */
    public final TableField<ProposalRecord, ItemType> ITEM_TYPE = createField(DSL.name("item_type"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::susy.item_type"), SQLDataType.VARCHAR)).asEnumDataType(ItemType.class), this, "");

    /**
     * The column <code>susy.proposal.description</code>.
     */
    public final TableField<ProposalRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>susy.proposal.name_aliases</code>.
     */
    public final TableField<ProposalRecord, String[]> NAME_ALIASES = createField(DSL.name("name_aliases"), SQLDataType.VARCHAR(128).array(), this, "");

    /**
     * The column <code>susy.proposal.created_at</code>.
     */
    public final TableField<ProposalRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>susy.proposal.modified_at</code>.
     */
    public final TableField<ProposalRecord, OffsetDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>susy.proposal.created_by</code>.
     */
    public final TableField<ProposalRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>susy.proposal.modified_by</code>.
     */
    public final TableField<ProposalRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(64), this, "");

    private Proposal(Name alias, Table<ProposalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Proposal(Name alias, Table<ProposalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>susy.proposal</code> table reference
     */
    public Proposal(String alias) {
        this(DSL.name(alias), PROPOSAL);
    }

    /**
     * Create an aliased <code>susy.proposal</code> table reference
     */
    public Proposal(Name alias) {
        this(alias, PROPOSAL);
    }

    /**
     * Create a <code>susy.proposal</code> table reference
     */
    public Proposal() {
        this(DSL.name("proposal"), null);
    }

    public <O extends Record> Proposal(Table<O> path, ForeignKey<O, ProposalRecord> childPath, InverseForeignKey<O, ProposalRecord> parentPath) {
        super(path, childPath, parentPath, PROPOSAL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProposalPath extends Proposal implements Path<ProposalRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProposalPath(Table<O> path, ForeignKey<O, ProposalRecord> childPath, InverseForeignKey<O, ProposalRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProposalPath(Name alias, Table<ProposalRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProposalPath as(String alias) {
            return new ProposalPath(DSL.name(alias), this);
        }

        @Override
        public ProposalPath as(Name alias) {
            return new ProposalPath(alias, this);
        }

        @Override
        public ProposalPath as(Table<?> alias) {
            return new ProposalPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Susy.SUSY;
    }

    @Override
    public UniqueKey<ProposalRecord> getPrimaryKey() {
        return Keys.PK_PROPOSAL;
    }

    @Override
    public List<UniqueKey<ProposalRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_PROPOSAL_NAME);
    }

    private transient ReviewProcessPath _reviewProcess;

    /**
     * Get the implicit to-many join path to the
     * <code>susy.review_process</code> table
     */
    public ReviewProcessPath reviewProcess() {
        if (_reviewProcess == null)
            _reviewProcess = new ReviewProcessPath(this, null, Keys.REVIEW_PROCESS__FK_REVIEW_PROCESS_PROPOSAL_UUID.getInverseKey());

        return _reviewProcess;
    }

    @Override
    public Proposal as(String alias) {
        return new Proposal(DSL.name(alias), this);
    }

    @Override
    public Proposal as(Name alias) {
        return new Proposal(alias, this);
    }

    @Override
    public Proposal as(Table<?> alias) {
        return new Proposal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proposal rename(String name) {
        return new Proposal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proposal rename(Name name) {
        return new Proposal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proposal rename(Table<?> name) {
        return new Proposal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal where(Condition condition) {
        return new Proposal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proposal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proposal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proposal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Proposal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Proposal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
