/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.Susy;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.enums.ProcessStatus;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables.Proposal.ProposalPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables.ReviewProcessStep.ReviewProcessStepPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.susy.tables.records.ReviewProcessRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ReviewProcess extends TableImpl<ReviewProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>susy.review_process</code>
     */
    public static final ReviewProcess REVIEW_PROCESS = new ReviewProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewProcessRecord> getRecordType() {
        return ReviewProcessRecord.class;
    }

    /**
     * The column <code>susy.review_process.uuid</code>.
     */
    public final TableField<ReviewProcessRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>susy.review_process.proposal_uuid</code>.
     */
    public final TableField<ReviewProcessRecord, java.util.UUID> PROPOSAL_UUID = createField(DSL.name("proposal_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>susy.review_process.requester_email</code>.
     */
    public final TableField<ReviewProcessRecord, String> REQUESTER_EMAIL = createField(DSL.name("requester_email"), SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>susy.review_process.status</code>.
     */
    public final TableField<ReviewProcessRecord, ProcessStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(ProcessStatus.class), this, "");

    /**
     * The column <code>susy.review_process.created_at</code>.
     */
    public final TableField<ReviewProcessRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>susy.review_process.finished_at</code>.
     */
    public final TableField<ReviewProcessRecord, OffsetDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private ReviewProcess(Name alias, Table<ReviewProcessRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ReviewProcess(Name alias, Table<ReviewProcessRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>susy.review_process</code> table reference
     */
    public ReviewProcess(String alias) {
        this(DSL.name(alias), REVIEW_PROCESS);
    }

    /**
     * Create an aliased <code>susy.review_process</code> table reference
     */
    public ReviewProcess(Name alias) {
        this(alias, REVIEW_PROCESS);
    }

    /**
     * Create a <code>susy.review_process</code> table reference
     */
    public ReviewProcess() {
        this(DSL.name("review_process"), null);
    }

    public <O extends Record> ReviewProcess(Table<O> path, ForeignKey<O, ReviewProcessRecord> childPath, InverseForeignKey<O, ReviewProcessRecord> parentPath) {
        super(path, childPath, parentPath, REVIEW_PROCESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReviewProcessPath extends ReviewProcess implements Path<ReviewProcessRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReviewProcessPath(Table<O> path, ForeignKey<O, ReviewProcessRecord> childPath, InverseForeignKey<O, ReviewProcessRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReviewProcessPath(Name alias, Table<ReviewProcessRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReviewProcessPath as(String alias) {
            return new ReviewProcessPath(DSL.name(alias), this);
        }

        @Override
        public ReviewProcessPath as(Name alias) {
            return new ReviewProcessPath(alias, this);
        }

        @Override
        public ReviewProcessPath as(Table<?> alias) {
            return new ReviewProcessPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Susy.SUSY;
    }

    @Override
    public UniqueKey<ReviewProcessRecord> getPrimaryKey() {
        return Keys.PK_REVIEW_PROCESS;
    }

    @Override
    public List<ForeignKey<ReviewProcessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEW_PROCESS__FK_REVIEW_PROCESS_PROPOSAL_UUID);
    }

    private transient ProposalPath _proposal;

    /**
     * Get the implicit join path to the <code>susy.proposal</code> table.
     */
    public ProposalPath proposal() {
        if (_proposal == null)
            _proposal = new ProposalPath(this, Keys.REVIEW_PROCESS__FK_REVIEW_PROCESS_PROPOSAL_UUID, null);

        return _proposal;
    }

    private transient ReviewProcessStepPath _reviewProcessStep;

    /**
     * Get the implicit to-many join path to the
     * <code>susy.review_process_step</code> table
     */
    public ReviewProcessStepPath reviewProcessStep() {
        if (_reviewProcessStep == null)
            _reviewProcessStep = new ReviewProcessStepPath(this, null, Keys.REVIEW_PROCESS_STEP__FK_REVIEW_PROCESS_STATUS_REVIEW_PROCESS_ID.getInverseKey());

        return _reviewProcessStep;
    }

    @Override
    public ReviewProcess as(String alias) {
        return new ReviewProcess(DSL.name(alias), this);
    }

    @Override
    public ReviewProcess as(Name alias) {
        return new ReviewProcess(alias, this);
    }

    @Override
    public ReviewProcess as(Table<?> alias) {
        return new ReviewProcess(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReviewProcess rename(String name) {
        return new ReviewProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReviewProcess rename(Name name) {
        return new ReviewProcess(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReviewProcess rename(Table<?> name) {
        return new ReviewProcess(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess where(Condition condition) {
        return new ReviewProcess(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReviewProcess where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReviewProcess where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReviewProcess where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ReviewProcess where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ReviewProcess whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
