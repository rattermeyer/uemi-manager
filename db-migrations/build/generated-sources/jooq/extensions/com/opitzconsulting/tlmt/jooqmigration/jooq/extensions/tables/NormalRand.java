/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.Extensions;
import com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.tables.records.NormalRandRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NormalRand extends TableImpl<NormalRandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>extensions.normal_rand</code>
     */
    public static final NormalRand NORMAL_RAND = new NormalRand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormalRandRecord> getRecordType() {
        return NormalRandRecord.class;
    }

    /**
     * The column <code>extensions.normal_rand.normal_rand</code>.
     */
    public final TableField<NormalRandRecord, Double> NORMAL_RAND_ = createField(DSL.name("normal_rand"), SQLDataType.DOUBLE, this, "");

    private NormalRand(Name alias, Table<NormalRandRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.DOUBLE),
            DSL.val(null, SQLDataType.DOUBLE)
        });
    }

    private NormalRand(Name alias, Table<NormalRandRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private NormalRand(Name alias, Table<NormalRandRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>extensions.normal_rand</code> table reference
     */
    public NormalRand(String alias) {
        this(DSL.name(alias), NORMAL_RAND);
    }

    /**
     * Create an aliased <code>extensions.normal_rand</code> table reference
     */
    public NormalRand(Name alias) {
        this(alias, NORMAL_RAND);
    }

    /**
     * Create a <code>extensions.normal_rand</code> table reference
     */
    public NormalRand() {
        this(DSL.name("normal_rand"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Extensions.EXTENSIONS;
    }

    @Override
    public NormalRand as(String alias) {
        return new NormalRand(DSL.name(alias), this, parameters);
    }

    @Override
    public NormalRand as(Name alias) {
        return new NormalRand(alias, this, parameters);
    }

    @Override
    public NormalRand as(Table<?> alias) {
        return new NormalRand(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalRand rename(String name) {
        return new NormalRand(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalRand rename(Name name) {
        return new NormalRand(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalRand rename(Table<?> name) {
        return new NormalRand(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public NormalRand call(
          Integer __1
        , Double __2
        , Double __3
    ) {
        NormalRand result = new NormalRand(DSL.name("normal_rand"), null, new Field[] {
            DSL.val(__1, SQLDataType.INTEGER),
            DSL.val(__2, SQLDataType.DOUBLE),
            DSL.val(__3, SQLDataType.DOUBLE)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public NormalRand call(
          Field<Integer> __1
        , Field<Double> __2
        , Field<Double> __3
    ) {
        NormalRand result = new NormalRand(DSL.name("normal_rand"), null, new Field[] {
            __1,
            __2,
            __3
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
