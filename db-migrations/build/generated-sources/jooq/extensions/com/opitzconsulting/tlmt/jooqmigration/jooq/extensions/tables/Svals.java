/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.Extensions;
import com.opitzconsulting.tlmt.jooqmigration.jooq.extensions.tables.records.SvalsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Svals extends TableImpl<SvalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>extensions.svals</code>
     */
    public static final Svals SVALS = new Svals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SvalsRecord> getRecordType() {
        return SvalsRecord.class;
    }

    /**
     * The column <code>extensions.svals.svals</code>.
     */
    public final TableField<SvalsRecord, String> SVALS_ = createField(DSL.name("svals"), SQLDataType.CLOB, this, "");

    private Svals(Name alias, Table<SvalsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, DefaultDataType.getDefaultDataType("\"extensions\".\"hstore\""))
        });
    }

    private Svals(Name alias, Table<SvalsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private Svals(Name alias, Table<SvalsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>extensions.svals</code> table reference
     */
    public Svals(String alias) {
        this(DSL.name(alias), SVALS);
    }

    /**
     * Create an aliased <code>extensions.svals</code> table reference
     */
    public Svals(Name alias) {
        this(alias, SVALS);
    }

    /**
     * Create a <code>extensions.svals</code> table reference
     */
    public Svals() {
        this(DSL.name("svals"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Extensions.EXTENSIONS;
    }

    @Override
    public Svals as(String alias) {
        return new Svals(DSL.name(alias), this, parameters);
    }

    @Override
    public Svals as(Name alias) {
        return new Svals(alias, this, parameters);
    }

    @Override
    public Svals as(Table<?> alias) {
        return new Svals(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Svals rename(String name) {
        return new Svals(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Svals rename(Name name) {
        return new Svals(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Svals rename(Table<?> name) {
        return new Svals(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Svals call(
          Object __1
    ) {
        Svals result = new Svals(DSL.name("svals"), null, new Field[] {
            DSL.val(__1, DefaultDataType.getDefaultDataType("\"extensions\".\"hstore\""))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Svals call(
          Field<Object> __1
    ) {
        Svals result = new Svals(DSL.name("svals"), null, new Field[] {
            __1
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
