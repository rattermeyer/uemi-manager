/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.LifecycleItemLink.LifecycleItemLinkPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.LifecycleItemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LifecycleItem extends TableImpl<LifecycleItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.lifecycle_item</code>
     */
    public static final LifecycleItem LIFECYCLE_ITEM = new LifecycleItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LifecycleItemRecord> getRecordType() {
        return LifecycleItemRecord.class;
    }

    /**
     * The column <code>lifecycle.lifecycle_item.uuid</code>.
     */
    public final TableField<LifecycleItemRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.id</code>.
     */
    public final TableField<LifecycleItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.active</code>.
     */
    public final TableField<LifecycleItemRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.description</code>.
     */
    public final TableField<LifecycleItemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.name</code>.
     */
    public final TableField<LifecycleItemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.last_updated</code>.
     */
    public final TableField<LifecycleItemRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item.created_at</code>.
     */
    public final TableField<LifecycleItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private LifecycleItem(Name alias, Table<LifecycleItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LifecycleItem(Name alias, Table<LifecycleItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.lifecycle_item</code> table reference
     */
    public LifecycleItem(String alias) {
        this(DSL.name(alias), LIFECYCLE_ITEM);
    }

    /**
     * Create an aliased <code>lifecycle.lifecycle_item</code> table reference
     */
    public LifecycleItem(Name alias) {
        this(alias, LIFECYCLE_ITEM);
    }

    /**
     * Create a <code>lifecycle.lifecycle_item</code> table reference
     */
    public LifecycleItem() {
        this(DSL.name("lifecycle_item"), null);
    }

    public <O extends Record> LifecycleItem(Table<O> path, ForeignKey<O, LifecycleItemRecord> childPath, InverseForeignKey<O, LifecycleItemRecord> parentPath) {
        super(path, childPath, parentPath, LIFECYCLE_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LifecycleItemPath extends LifecycleItem implements Path<LifecycleItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LifecycleItemPath(Table<O> path, ForeignKey<O, LifecycleItemRecord> childPath, InverseForeignKey<O, LifecycleItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LifecycleItemPath(Name alias, Table<LifecycleItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LifecycleItemPath as(String alias) {
            return new LifecycleItemPath(DSL.name(alias), this);
        }

        @Override
        public LifecycleItemPath as(Name alias) {
            return new LifecycleItemPath(alias, this);
        }

        @Override
        public LifecycleItemPath as(Table<?> alias) {
            return new LifecycleItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public Identity<LifecycleItemRecord, Long> getIdentity() {
        return (Identity<LifecycleItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LifecycleItemRecord> getPrimaryKey() {
        return Keys.PK_LIFECYCLE_ITEM;
    }

    @Override
    public List<UniqueKey<LifecycleItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_PORTFOLIO_ITEM_NAME);
    }

    private transient LifecycleItemLinkPath _lifecycleItemLink;

    /**
     * Get the implicit to-many join path to the
     * <code>lifecycle.lifecycle_item_link</code> table
     */
    public LifecycleItemLinkPath lifecycleItemLink() {
        if (_lifecycleItemLink == null)
            _lifecycleItemLink = new LifecycleItemLinkPath(this, null, Keys.LIFECYCLE_ITEM_LINK__FK_LIFECYCLE_ITEM_LINK_ITEM.getInverseKey());

        return _lifecycleItemLink;
    }

    @Override
    public LifecycleItem as(String alias) {
        return new LifecycleItem(DSL.name(alias), this);
    }

    @Override
    public LifecycleItem as(Name alias) {
        return new LifecycleItem(alias, this);
    }

    @Override
    public LifecycleItem as(Table<?> alias) {
        return new LifecycleItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItem rename(String name) {
        return new LifecycleItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItem rename(Name name) {
        return new LifecycleItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItem rename(Table<?> name) {
        return new LifecycleItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem where(Condition condition) {
        return new LifecycleItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
