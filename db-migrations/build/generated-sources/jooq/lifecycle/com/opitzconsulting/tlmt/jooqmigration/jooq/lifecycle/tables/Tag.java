/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.TagGroup.TagGroupPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.TagRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tag extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.tag</code>
     */
    public static final Tag TAG = new Tag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>lifecycle.tag.name</code>.
     */
    public final TableField<TagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>lifecycle.tag.tag_group_id</code>.
     */
    public final TableField<TagRecord, Long> TAG_GROUP_ID = createField(DSL.name("tag_group_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lifecycle.tag.active</code>.
     */
    public final TableField<TagRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Tag(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.tag</code> table reference
     */
    public Tag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>lifecycle.tag</code> table reference
     */
    public Tag(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>lifecycle.tag</code> table reference
     */
    public Tag() {
        this(DSL.name("tag"), null);
    }

    public <O extends Record> Tag(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
        super(path, childPath, parentPath, TAG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TagPath extends Tag implements Path<TagRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TagPath(Table<O> path, ForeignKey<O, TagRecord> childPath, InverseForeignKey<O, TagRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TagPath(Name alias, Table<TagRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TagPath as(String alias) {
            return new TagPath(DSL.name(alias), this);
        }

        @Override
        public TagPath as(Name alias) {
            return new TagPath(alias, this);
        }

        @Override
        public TagPath as(Table<?> alias) {
            return new TagPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.PK_TAG;
    }

    @Override
    public List<ForeignKey<TagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG__FK_TAG_TAG_GROUP);
    }

    private transient TagGroupPath _tagGroup;

    /**
     * Get the implicit join path to the <code>lifecycle.tag_group</code> table.
     */
    public TagGroupPath tagGroup() {
        if (_tagGroup == null)
            _tagGroup = new TagGroupPath(this, Keys.TAG__FK_TAG_TAG_GROUP, null);

        return _tagGroup;
    }

    @Override
    public Tag as(String alias) {
        return new Tag(DSL.name(alias), this);
    }

    @Override
    public Tag as(Name alias) {
        return new Tag(alias, this);
    }

    @Override
    public Tag as(Table<?> alias) {
        return new Tag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(String name) {
        return new Tag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Name name) {
        return new Tag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Table<?> name) {
        return new Tag(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition condition) {
        return new Tag(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tag where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tag whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
