/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.SkillAssessment.SkillAssessmentPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.SkillDistributionRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SkillDistribution extends TableImpl<SkillDistributionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.skill_distribution</code>
     */
    public static final SkillDistribution SKILL_DISTRIBUTION = new SkillDistribution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillDistributionRecord> getRecordType() {
        return SkillDistributionRecord.class;
    }

    /**
     * The column <code>lifecycle.skill_distribution.id</code>.
     */
    public final TableField<SkillDistributionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lifecycle.skill_distribution.uuid</code>.
     */
    public final TableField<SkillDistributionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>lifecycle.skill_distribution.synced_at</code>.
     */
    public final TableField<SkillDistributionRecord, OffsetDateTime> SYNCED_AT = createField(DSL.name("synced_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>lifecycle.skill_distribution.count_skills</code>.
     */
    public final TableField<SkillDistributionRecord, Integer> COUNT_SKILLS = createField(DSL.name("count_skills"), SQLDataType.INTEGER, this, "");

    private SkillDistribution(Name alias, Table<SkillDistributionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SkillDistribution(Name alias, Table<SkillDistributionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.skill_distribution</code> table
     * reference
     */
    public SkillDistribution(String alias) {
        this(DSL.name(alias), SKILL_DISTRIBUTION);
    }

    /**
     * Create an aliased <code>lifecycle.skill_distribution</code> table
     * reference
     */
    public SkillDistribution(Name alias) {
        this(alias, SKILL_DISTRIBUTION);
    }

    /**
     * Create a <code>lifecycle.skill_distribution</code> table reference
     */
    public SkillDistribution() {
        this(DSL.name("skill_distribution"), null);
    }

    public <O extends Record> SkillDistribution(Table<O> path, ForeignKey<O, SkillDistributionRecord> childPath, InverseForeignKey<O, SkillDistributionRecord> parentPath) {
        super(path, childPath, parentPath, SKILL_DISTRIBUTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SkillDistributionPath extends SkillDistribution implements Path<SkillDistributionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SkillDistributionPath(Table<O> path, ForeignKey<O, SkillDistributionRecord> childPath, InverseForeignKey<O, SkillDistributionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SkillDistributionPath(Name alias, Table<SkillDistributionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SkillDistributionPath as(String alias) {
            return new SkillDistributionPath(DSL.name(alias), this);
        }

        @Override
        public SkillDistributionPath as(Name alias) {
            return new SkillDistributionPath(alias, this);
        }

        @Override
        public SkillDistributionPath as(Table<?> alias) {
            return new SkillDistributionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public Identity<SkillDistributionRecord, Long> getIdentity() {
        return (Identity<SkillDistributionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SkillDistributionRecord> getPrimaryKey() {
        return Keys.PK_SKILL_DISTRIBUTION;
    }

    private transient SkillAssessmentPath _skillAssessment;

    /**
     * Get the implicit to-many join path to the
     * <code>lifecycle.skill_assessment</code> table
     */
    public SkillAssessmentPath skillAssessment() {
        if (_skillAssessment == null)
            _skillAssessment = new SkillAssessmentPath(this, null, Keys.SKILL_ASSESSMENT__FK_SKILL_ASSESSMENT_DISTRIBUTION.getInverseKey());

        return _skillAssessment;
    }

    @Override
    public SkillDistribution as(String alias) {
        return new SkillDistribution(DSL.name(alias), this);
    }

    @Override
    public SkillDistribution as(Name alias) {
        return new SkillDistribution(alias, this);
    }

    @Override
    public SkillDistribution as(Table<?> alias) {
        return new SkillDistribution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillDistribution rename(String name) {
        return new SkillDistribution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillDistribution rename(Name name) {
        return new SkillDistribution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillDistribution rename(Table<?> name) {
        return new SkillDistribution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution where(Condition condition) {
        return new SkillDistribution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillDistribution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillDistribution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillDistribution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillDistribution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillDistribution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
