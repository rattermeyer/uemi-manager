/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.enums.TagGroupRule;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.Tag.TagPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.TagGroupRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TagGroup extends TableImpl<TagGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.tag_group</code>
     */
    public static final TagGroup TAG_GROUP = new TagGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagGroupRecord> getRecordType() {
        return TagGroupRecord.class;
    }

    /**
     * The column <code>lifecycle.tag_group.uuid</code>.
     */
    public final TableField<TagGroupRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("extensions.uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>lifecycle.tag_group.id</code>.
     */
    public final TableField<TagGroupRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lifecycle.tag_group.title</code>.
     */
    public final TableField<TagGroupRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>lifecycle.tag_group.background_color</code>.
     */
    public final TableField<TagGroupRecord, String> BACKGROUND_COLOR = createField(DSL.name("background_color"), SQLDataType.VARCHAR(7), this, "");

    /**
     * The column <code>lifecycle.tag_group.rule</code>.
     */
    public final TableField<TagGroupRecord, TagGroupRule> RULE = createField(DSL.name("rule"), SQLDataType.VARCHAR.defaultValue(DSL.field(DSL.raw("'OPTIONAL'::lifecycle.tag_group_rule"), SQLDataType.VARCHAR)).asEnumDataType(TagGroupRule.class), this, "");

    /**
     * The column <code>lifecycle.tag_group.modified_at</code>.
     */
    public final TableField<TagGroupRecord, OffsetDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>lifecycle.tag_group.created_at</code>.
     */
    public final TableField<TagGroupRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private TagGroup(Name alias, Table<TagGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TagGroup(Name alias, Table<TagGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.tag_group</code> table reference
     */
    public TagGroup(String alias) {
        this(DSL.name(alias), TAG_GROUP);
    }

    /**
     * Create an aliased <code>lifecycle.tag_group</code> table reference
     */
    public TagGroup(Name alias) {
        this(alias, TAG_GROUP);
    }

    /**
     * Create a <code>lifecycle.tag_group</code> table reference
     */
    public TagGroup() {
        this(DSL.name("tag_group"), null);
    }

    public <O extends Record> TagGroup(Table<O> path, ForeignKey<O, TagGroupRecord> childPath, InverseForeignKey<O, TagGroupRecord> parentPath) {
        super(path, childPath, parentPath, TAG_GROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TagGroupPath extends TagGroup implements Path<TagGroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TagGroupPath(Table<O> path, ForeignKey<O, TagGroupRecord> childPath, InverseForeignKey<O, TagGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TagGroupPath(Name alias, Table<TagGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TagGroupPath as(String alias) {
            return new TagGroupPath(DSL.name(alias), this);
        }

        @Override
        public TagGroupPath as(Name alias) {
            return new TagGroupPath(alias, this);
        }

        @Override
        public TagGroupPath as(Table<?> alias) {
            return new TagGroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public Identity<TagGroupRecord, Long> getIdentity() {
        return (Identity<TagGroupRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TagGroupRecord> getPrimaryKey() {
        return Keys.PK_TAG_GROUP;
    }

    @Override
    public List<UniqueKey<TagGroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_TAG_GROUP_TITLE);
    }

    private transient TagPath _tag;

    /**
     * Get the implicit to-many join path to the <code>lifecycle.tag</code>
     * table
     */
    public TagPath tag() {
        if (_tag == null)
            _tag = new TagPath(this, null, Keys.TAG__FK_TAG_TAG_GROUP.getInverseKey());

        return _tag;
    }

    @Override
    public TagGroup as(String alias) {
        return new TagGroup(DSL.name(alias), this);
    }

    @Override
    public TagGroup as(Name alias) {
        return new TagGroup(alias, this);
    }

    @Override
    public TagGroup as(Table<?> alias) {
        return new TagGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroup rename(String name) {
        return new TagGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroup rename(Name name) {
        return new TagGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagGroup rename(Table<?> name) {
        return new TagGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup where(Condition condition) {
        return new TagGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TagGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TagGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
