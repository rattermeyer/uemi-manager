/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.enums.Joblevel;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.enums.Region;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.SkillDistribution.SkillDistributionPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.SkillAssessmentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SkillAssessment extends TableImpl<SkillAssessmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.skill_assessment</code>
     */
    public static final SkillAssessment SKILL_ASSESSMENT = new SkillAssessment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkillAssessmentRecord> getRecordType() {
        return SkillAssessmentRecord.class;
    }

    /**
     * The column <code>lifecycle.skill_assessment.skill_distribution_id</code>.
     */
    public final TableField<SkillAssessmentRecord, Long> SKILL_DISTRIBUTION_ID = createField(DSL.name("skill_distribution_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lifecycle.skill_assessment.item_uuid</code>.
     */
    public final TableField<SkillAssessmentRecord, UUID> ITEM_UUID = createField(DSL.name("item_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>lifecycle.skill_assessment.region</code>.
     */
    public final TableField<SkillAssessmentRecord, Region> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR.asEnumDataType(Region.class), this, "");

    /**
     * The column <code>lifecycle.skill_assessment.joblevel</code>.
     */
    public final TableField<SkillAssessmentRecord, Joblevel> JOBLEVEL = createField(DSL.name("joblevel"), SQLDataType.VARCHAR.asEnumDataType(Joblevel.class), this, "");

    /**
     * The column <code>lifecycle.skill_assessment.count</code>.
     */
    public final TableField<SkillAssessmentRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lifecycle.skill_assessment.last_updated</code>.
     */
    public final TableField<SkillAssessmentRecord, OffsetDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private SkillAssessment(Name alias, Table<SkillAssessmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SkillAssessment(Name alias, Table<SkillAssessmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.skill_assessment</code> table reference
     */
    public SkillAssessment(String alias) {
        this(DSL.name(alias), SKILL_ASSESSMENT);
    }

    /**
     * Create an aliased <code>lifecycle.skill_assessment</code> table reference
     */
    public SkillAssessment(Name alias) {
        this(alias, SKILL_ASSESSMENT);
    }

    /**
     * Create a <code>lifecycle.skill_assessment</code> table reference
     */
    public SkillAssessment() {
        this(DSL.name("skill_assessment"), null);
    }

    public <O extends Record> SkillAssessment(Table<O> path, ForeignKey<O, SkillAssessmentRecord> childPath, InverseForeignKey<O, SkillAssessmentRecord> parentPath) {
        super(path, childPath, parentPath, SKILL_ASSESSMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SkillAssessmentPath extends SkillAssessment implements Path<SkillAssessmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SkillAssessmentPath(Table<O> path, ForeignKey<O, SkillAssessmentRecord> childPath, InverseForeignKey<O, SkillAssessmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SkillAssessmentPath(Name alias, Table<SkillAssessmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SkillAssessmentPath as(String alias) {
            return new SkillAssessmentPath(DSL.name(alias), this);
        }

        @Override
        public SkillAssessmentPath as(Name alias) {
            return new SkillAssessmentPath(alias, this);
        }

        @Override
        public SkillAssessmentPath as(Table<?> alias) {
            return new SkillAssessmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public List<ForeignKey<SkillAssessmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SKILL_ASSESSMENT__FK_SKILL_ASSESSMENT_DISTRIBUTION);
    }

    private transient SkillDistributionPath _skillDistribution;

    /**
     * Get the implicit join path to the
     * <code>lifecycle.skill_distribution</code> table.
     */
    public SkillDistributionPath skillDistribution() {
        if (_skillDistribution == null)
            _skillDistribution = new SkillDistributionPath(this, Keys.SKILL_ASSESSMENT__FK_SKILL_ASSESSMENT_DISTRIBUTION, null);

        return _skillDistribution;
    }

    @Override
    public SkillAssessment as(String alias) {
        return new SkillAssessment(DSL.name(alias), this);
    }

    @Override
    public SkillAssessment as(Name alias) {
        return new SkillAssessment(alias, this);
    }

    @Override
    public SkillAssessment as(Table<?> alias) {
        return new SkillAssessment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillAssessment rename(String name) {
        return new SkillAssessment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillAssessment rename(Name name) {
        return new SkillAssessment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkillAssessment rename(Table<?> name) {
        return new SkillAssessment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment where(Condition condition) {
        return new SkillAssessment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillAssessment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillAssessment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillAssessment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SkillAssessment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SkillAssessment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
