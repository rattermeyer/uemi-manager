/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.Portfolio.PortfolioPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.PortfolioItemRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PortfolioItem extends TableImpl<PortfolioItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.portfolio_item</code>
     */
    public static final PortfolioItem PORTFOLIO_ITEM = new PortfolioItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortfolioItemRecord> getRecordType() {
        return PortfolioItemRecord.class;
    }

    /**
     * The column <code>lifecycle.portfolio_item.portfolio_id</code>.
     */
    public final TableField<PortfolioItemRecord, Long> PORTFOLIO_ID = createField(DSL.name("portfolio_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.item_uuid</code>.
     */
    public final TableField<PortfolioItemRecord, UUID> ITEM_UUID = createField(DSL.name("item_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.item_name</code>.
     */
    public final TableField<PortfolioItemRecord, String> ITEM_NAME = createField(DSL.name("item_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.status</code>.
     */
    public final TableField<PortfolioItemRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.reason</code>.
     */
    public final TableField<PortfolioItemRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.modified_at</code>.
     */
    public final TableField<PortfolioItemRecord, OffsetDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>lifecycle.portfolio_item.created_at</code>.
     */
    public final TableField<PortfolioItemRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private PortfolioItem(Name alias, Table<PortfolioItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PortfolioItem(Name alias, Table<PortfolioItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.portfolio_item</code> table reference
     */
    public PortfolioItem(String alias) {
        this(DSL.name(alias), PORTFOLIO_ITEM);
    }

    /**
     * Create an aliased <code>lifecycle.portfolio_item</code> table reference
     */
    public PortfolioItem(Name alias) {
        this(alias, PORTFOLIO_ITEM);
    }

    /**
     * Create a <code>lifecycle.portfolio_item</code> table reference
     */
    public PortfolioItem() {
        this(DSL.name("portfolio_item"), null);
    }

    public <O extends Record> PortfolioItem(Table<O> path, ForeignKey<O, PortfolioItemRecord> childPath, InverseForeignKey<O, PortfolioItemRecord> parentPath) {
        super(path, childPath, parentPath, PORTFOLIO_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PortfolioItemPath extends PortfolioItem implements Path<PortfolioItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PortfolioItemPath(Table<O> path, ForeignKey<O, PortfolioItemRecord> childPath, InverseForeignKey<O, PortfolioItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PortfolioItemPath(Name alias, Table<PortfolioItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PortfolioItemPath as(String alias) {
            return new PortfolioItemPath(DSL.name(alias), this);
        }

        @Override
        public PortfolioItemPath as(Name alias) {
            return new PortfolioItemPath(alias, this);
        }

        @Override
        public PortfolioItemPath as(Table<?> alias) {
            return new PortfolioItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public UniqueKey<PortfolioItemRecord> getPrimaryKey() {
        return Keys.PK_PORTFOLIO_ITEM;
    }

    @Override
    public List<ForeignKey<PortfolioItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PORTFOLIO_ITEM__FK_PORTFOLIO_ITEM_PORTFOLIO);
    }

    private transient PortfolioPath _portfolio;

    /**
     * Get the implicit join path to the <code>lifecycle.portfolio</code> table.
     */
    public PortfolioPath portfolio() {
        if (_portfolio == null)
            _portfolio = new PortfolioPath(this, Keys.PORTFOLIO_ITEM__FK_PORTFOLIO_ITEM_PORTFOLIO, null);

        return _portfolio;
    }

    @Override
    public PortfolioItem as(String alias) {
        return new PortfolioItem(DSL.name(alias), this);
    }

    @Override
    public PortfolioItem as(Name alias) {
        return new PortfolioItem(alias, this);
    }

    @Override
    public PortfolioItem as(Table<?> alias) {
        return new PortfolioItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItem rename(String name) {
        return new PortfolioItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItem rename(Name name) {
        return new PortfolioItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PortfolioItem rename(Table<?> name) {
        return new PortfolioItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem where(Condition condition) {
        return new PortfolioItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PortfolioItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PortfolioItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
