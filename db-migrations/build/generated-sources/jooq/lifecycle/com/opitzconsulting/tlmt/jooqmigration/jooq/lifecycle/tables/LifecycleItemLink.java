/*
 * This file is generated by jOOQ.
 */
package com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables;


import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Keys;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.Lifecycle;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.LifecycleItem.LifecycleItemPath;
import com.opitzconsulting.tlmt.jooqmigration.jooq.lifecycle.tables.records.LifecycleItemLinkRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LifecycleItemLink extends TableImpl<LifecycleItemLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lifecycle.lifecycle_item_link</code>
     */
    public static final LifecycleItemLink LIFECYCLE_ITEM_LINK = new LifecycleItemLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LifecycleItemLinkRecord> getRecordType() {
        return LifecycleItemLinkRecord.class;
    }

    /**
     * The column <code>lifecycle.lifecycle_item_link.lifecycle_item_id</code>.
     */
    public final TableField<LifecycleItemLinkRecord, Long> LIFECYCLE_ITEM_ID = createField(DSL.name("lifecycle_item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item_link.index</code>.
     */
    public final TableField<LifecycleItemLinkRecord, Integer> INDEX = createField(DSL.name("index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item_link.name</code>.
     */
    public final TableField<LifecycleItemLinkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item_link.url</code>.
     */
    public final TableField<LifecycleItemLinkRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>lifecycle.lifecycle_item_link.comment</code>.
     */
    public final TableField<LifecycleItemLinkRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024), this, "");

    private LifecycleItemLink(Name alias, Table<LifecycleItemLinkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LifecycleItemLink(Name alias, Table<LifecycleItemLinkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lifecycle.lifecycle_item_link</code> table
     * reference
     */
    public LifecycleItemLink(String alias) {
        this(DSL.name(alias), LIFECYCLE_ITEM_LINK);
    }

    /**
     * Create an aliased <code>lifecycle.lifecycle_item_link</code> table
     * reference
     */
    public LifecycleItemLink(Name alias) {
        this(alias, LIFECYCLE_ITEM_LINK);
    }

    /**
     * Create a <code>lifecycle.lifecycle_item_link</code> table reference
     */
    public LifecycleItemLink() {
        this(DSL.name("lifecycle_item_link"), null);
    }

    public <O extends Record> LifecycleItemLink(Table<O> path, ForeignKey<O, LifecycleItemLinkRecord> childPath, InverseForeignKey<O, LifecycleItemLinkRecord> parentPath) {
        super(path, childPath, parentPath, LIFECYCLE_ITEM_LINK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LifecycleItemLinkPath extends LifecycleItemLink implements Path<LifecycleItemLinkRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LifecycleItemLinkPath(Table<O> path, ForeignKey<O, LifecycleItemLinkRecord> childPath, InverseForeignKey<O, LifecycleItemLinkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LifecycleItemLinkPath(Name alias, Table<LifecycleItemLinkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LifecycleItemLinkPath as(String alias) {
            return new LifecycleItemLinkPath(DSL.name(alias), this);
        }

        @Override
        public LifecycleItemLinkPath as(Name alias) {
            return new LifecycleItemLinkPath(alias, this);
        }

        @Override
        public LifecycleItemLinkPath as(Table<?> alias) {
            return new LifecycleItemLinkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lifecycle.LIFECYCLE;
    }

    @Override
    public UniqueKey<LifecycleItemLinkRecord> getPrimaryKey() {
        return Keys.PK_LIFECYCLE_ITEM_LINK;
    }

    @Override
    public List<UniqueKey<LifecycleItemLinkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_PORTFOLIO_ITEM_LINK_NAME);
    }

    @Override
    public List<ForeignKey<LifecycleItemLinkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LIFECYCLE_ITEM_LINK__FK_LIFECYCLE_ITEM_LINK_ITEM);
    }

    private transient LifecycleItemPath _lifecycleItem;

    /**
     * Get the implicit join path to the <code>lifecycle.lifecycle_item</code>
     * table.
     */
    public LifecycleItemPath lifecycleItem() {
        if (_lifecycleItem == null)
            _lifecycleItem = new LifecycleItemPath(this, Keys.LIFECYCLE_ITEM_LINK__FK_LIFECYCLE_ITEM_LINK_ITEM, null);

        return _lifecycleItem;
    }

    @Override
    public LifecycleItemLink as(String alias) {
        return new LifecycleItemLink(DSL.name(alias), this);
    }

    @Override
    public LifecycleItemLink as(Name alias) {
        return new LifecycleItemLink(alias, this);
    }

    @Override
    public LifecycleItemLink as(Table<?> alias) {
        return new LifecycleItemLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItemLink rename(String name) {
        return new LifecycleItemLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItemLink rename(Name name) {
        return new LifecycleItemLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleItemLink rename(Table<?> name) {
        return new LifecycleItemLink(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink where(Condition condition) {
        return new LifecycleItemLink(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItemLink where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItemLink where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItemLink where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LifecycleItemLink where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LifecycleItemLink whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
